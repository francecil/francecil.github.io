(window.webpackJsonp=window.webpackJsonp||[]).push([[216],{1103:function(e,s,a){"use strict";a.r(s);var t=a(30),r=Object(t.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("AMD/UMD/CommonJS/ESM")]),e._v(" "),s("h3",{attrs:{id:"commonjs-如何用在浏览器上"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-如何用在浏览器上"}},[e._v("#")]),e._v(" CommonJs 如何用在浏览器上")]),e._v(" "),s("p",[e._v("require module exports 是 nodejs 运行时提供的接口，所以只能对这些接口进行模拟")]),e._v(" "),s("p",[e._v("核心思想是注册模块（将模块放入数组）和读取模块（读取时通过模块id读取到对应的模块）")]),e._v(" "),s("p",[e._v("模拟倒还好，主要是加载模块a的时候引入模块b 这时候浏览器还得去下载b,下载b完执行然后才进行执行a，这要怎么实现？")]),e._v(" "),s("p",[e._v("有种做法是一开始就对代码做静态分析，将模块与对应的依赖返回给浏览器，必须依赖下载执行完才执行该模块")]),e._v(" "),s("p",[e._v("另外的做法是定一套模板封装模块定义，于是出现了 AMD 和 CMD")]),e._v(" "),s("p",[e._v("AMD 的主要实现为 requireJS ，定义了两个函数 define 和 require ，前者注册模块，后者添加依赖及依赖模块加载完后的回调")]),e._v(" "),s("blockquote",[s("p",[e._v("AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块")])]),e._v(" "),s("p",[e._v("CMD 的主要实现为 seaJS")]),e._v(" "),s("blockquote",[s("p",[e._v("CMD推崇就近依赖，只有在用到某个模块的时候再去require")])]),e._v(" "),s("h3",{attrs:{id:"nodejs-中如何使用-esm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-中如何使用-esm"}},[e._v("#")]),e._v(" nodejs 中如何使用 esm")]),e._v(" "),s("p",[e._v('package.json "type" field')]),e._v(" "),s("p",[e._v("or")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("node --experimental-modules main.mjs\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"浏览器不支持-es-module-的话-需要用-babel-转-转后有什么不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器不支持-es-module-的话-需要用-babel-转-转后有什么不同"}},[e._v("#")]),e._v(" 浏览器不支持 ES Module 的话，需要用 babel 转，转后有什么不同")]),e._v(" "),s("h3",{attrs:{id:"commonjs-和-es-module-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-和-es-module-的区别"}},[e._v("#")]),e._v(" CommonJs 和 ES Module 的区别")]),e._v(" "),s("p",[e._v("CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。")]),e._v(" "),s("p",[e._v("所以")]),e._v(" "),s("p",[e._v("esm 在编译的时候，js引擎会对脚本进行静态分析，遇到import命令就会生成一个只读引用，等到真正执行代码时候再通过这个引用去该模块里面取值，因此原始值变了import加载的值也会变。")]),e._v(" "),s("p",[e._v("cjs 输出拷贝，esm 输出引用")]),e._v(" "),s("p",[e._v("cjs demo")]),e._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("this 值不同，前者为模块对象，后者为 undefined，同时也说明了作用域不同")]),e._v(" "),s("p",[e._v("esm 的 import 有 const 的效果，即基础类型的话不可修改，对象的话不可修改引用地址。动态引用，不会缓存值")]),e._v(" "),s("p",[e._v("esm "),s("code",[e._v("export default 1")]),e._v(" 导出的其实是一个 key 为 default 变量，其值为 1")]),e._v(" "),s("p",[e._v("然后可以 "),s("code",[e._v("import xx from ''")]),e._v(" 中拿到，这个 xx 随便写都写")]),e._v(" "),s("p",[e._v("而 "),s("code",[e._v("import * as obj from ''")]),e._v(" 拿到的是所有引用，包括 default 等；用了这个不能再使用其他的如 "),s("code",[e._v("* as x,{xx}")]),e._v(" 不然存在多个相同引用")]),e._v(" "),s("h3",{attrs:{id:"处理循环加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理循环加载"}},[e._v("#")]),e._v(" 处理循环加载")]),e._v(" "),s("h2",{attrs:{id:"拓展阅读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拓展阅读"}},[e._v("#")]),e._v(" 拓展阅读")]),e._v(" "),s("p",[s("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES6-模块与-CommonJS-模块的差异"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);