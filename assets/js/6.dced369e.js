(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{1017:function(t,e,r){"use strict";r.r(e);var o=r(30),v=Object(o.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("前端程序员最容易搞出 P0 事故的就是白屏，PC 上的白屏我们比较好调，打开 Chrome Devtools 就能看见。")]),t._v(" "),e("p",[t._v("但是手机上的白屏怎么调？以及远程用户手机上的白屏又该怎么调？ 这时候就需要使用"),e("strong",[t._v("远程调试")]),t._v("的技术了。")]),t._v(" "),e("p",[e("img",{attrs:{src:r(753),alt:""}})]),t._v(" "),e("p",[t._v("本文将对"),e("strong",[t._v("远程调试")]),t._v("这个话题进行探讨，并给出最佳实践。")]),t._v(" "),e("h2",{attrs:{id:"谁适合阅读本文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谁适合阅读本文档"}},[t._v("#")]),t._v(" 谁适合阅读本文档")]),t._v(" "),e("p",[t._v("有移动端 Web 开发背景，或者对移动端 Web 开发感兴趣的前端同学")]),t._v(" "),e("h2",{attrs:{id:"预期收获"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#预期收获"}},[t._v("#")]),t._v(" 预期收获")]),t._v(" "),e("ol",[e("li",[t._v("了解远程调试的发展历程")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("掌握远程调试的基本原理")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("掌握不同场景的调试决策")])]),t._v(" "),e("h2",{attrs:{id:"分享思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分享思路"}},[t._v("#")]),t._v(" 分享思路")]),t._v(" "),e("ol",[e("li",[t._v("介绍调试与远程调试的概念")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("介绍 hybrid 远程调试的发展历程以及相关技术")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("对调试方案进行对比，并提供最佳实践")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("对远程调试未来的一个畅想")])]),t._v(" "),e("h2",{attrs:{id:"特殊说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特殊说明"}},[t._v("#")]),t._v(" 特殊说明")]),t._v(" "),e("ul",[e("li",[t._v("hybrid：前端和客户端的混合开发，"),e("strong",[t._v("一般是指")]),t._v("在客户端应用上启动 Webview 渲染 Web 页面，兼顾原生 App 和 Web 的优点。在本文中，为方便理解，"),e("strong",[t._v("hybrid 泛指移动设备上的前端技术")]),t._v("，包含原来的 hybrid 应用、以及移动浏览器 Web。")])]),t._v(" "),e("h1",{attrs:{id:"调试与远程调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调试与远程调试"}},[t._v("#")]),t._v(" 调试与远程调试")]),t._v(" "),e("h2",{attrs:{id:"调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调试"}},[t._v("#")]),t._v(" 调试")]),t._v(" "),e("ul",[e("li",[t._v("使用 Chrome Devtools 调试网页，是调试")])]),t._v(" "),e("ul",[e("li",[t._v("使用 VSCode Debugger 调试 Node 应用，也是调试")])]),t._v(" "),e("p",[t._v("他们的共同点在于：")]),t._v(" "),e("ul",[e("li",[t._v("有一个"),e("strong",[t._v("调试界面（client）")]),t._v(" ，比如 Chrome Devtools 、VSCode Debugger")])]),t._v(" "),e("ul",[e("li",[t._v("有一个"),e("strong",[t._v("目标调试服务（server）")]),t._v(" ，比如 网页、Node 应用")])]),t._v(" "),e("ul",[e("li",[t._v("调试界面和目标服务之间约定了一个"),e("strong",[t._v("调试协议（protocol）")]),t._v(" ，比如 Chrome Devtools 的 "),e("code",[t._v("Chrome Devtools Protocol (CDP)")]),t._v(" ，VSCode Debugger 的 "),e("code",[t._v("Debug Adapter Protocol")])])]),t._v(" "),e("ul",[e("li",[t._v("需要一个"),e("strong",[t._v("传输通道（transport channel）")]),t._v(" 来传递协议 ，比如"),e("strong",[t._v("使用内部函数调用")]),t._v("，或者"),e("strong",[t._v("基于网络传输的")]),t._v(" "),e("strong",[t._v("websocket")]),t._v(" "),e("strong",[t._v("方案，usb 传输")]),t._v("等等")])]),t._v(" "),e("p",[t._v("因此，我们粗浅的定义调试由四部分组成")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("调试四要素")])]),t._v(" "),e("th")])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[t._v("调试界面（client）")])]),t._v(" "),e("td",[e("strong",[t._v("调试协议（protocol）")])])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("目标调试服务（server）")])]),t._v(" "),e("td",[e("strong",[t._v("传输通道（transport channel）")])])])])]),t._v(" "),e("h2",{attrs:{id:"远程调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程调试"}},[t._v("#")]),t._v(" 远程调试")]),t._v(" "),e("p",[t._v("相比调试，远程调试的"),e("strong",[t._v("调试界面（client）")]),t._v(" 和"),e("strong",[t._v("目标调试服务（server）")]),t._v(" 一定在不同的机器上；")]),t._v(" "),e("p",[t._v("此外，"),e("strong",[t._v("远程调试")]),t._v("在"),e("strong",[t._v("传输通道")]),t._v("上做了限定，需要借助一些物理介质（比如 WIFI、蓝牙、USB）来配合"),e("strong",[t._v("传输通道（transport channel）")]),t._v(" 传递协议")]),t._v(" "),e("p",[t._v("对于 hybrid 这个场景，远程调试的四要素分别是：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("四要素")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[t._v("调试界面（client）")])]),t._v(" "),e("td",[t._v("Chrome Devtools 、Safari Inspector 等调试工具，目前 Chrome Devtools 使用率占比最高")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("目标调试服务（server）")])]),t._v(" "),e("td",[t._v("手机 web 页面")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("调试协议（protocol）")])]),t._v(" "),e("td",[t._v("Chrome Devtools Protocol ，Safari 的 Webkit Devtools Protocol")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("传输通道（transport channel）")])]),t._v(" "),e("td",[t._v("可以是基于 USB 的请求转发、或者基于网络的 websocket 转发，根据不同场景来决定使用的技术")])])])]),t._v(" "),e("h1",{attrs:{id:"发展历程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发展历程"}},[t._v("#")]),t._v(" 发展历程")]),t._v(" "),e("p",[e("img",{attrs:{src:r(754),alt:"image.png"}})]),t._v(" "),e("h2",{attrs:{id:"阶段-0-wap-时代的原始调试-2000"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阶段-0-wap-时代的原始调试-2000"}},[t._v("#")]),t._v(" 阶段 0：WAP 时代的原始调试 - 2000")]),t._v(" "),e("p",[e("img",{attrs:{src:r(755),alt:""}})]),t._v(" "),e("p",[t._v("早期的移动端网页称之为 WAP ，支持展示少量页面标签以及页面脚本。")]),t._v(" "),e("p",[t._v("当时存在着各种类型的操作系统，比如诺基亚的 Symbian、黑莓等等，大部分手机都会支持 WAP 。")]),t._v(" "),e("p",[t._v("以诺基亚为例，2005 年诺基亚手机内置 "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Nokia_Browser_for_Symbian",target:"_blank",rel:"noopener noreferrer"}},[t._v("S60 浏览器"),e("OutboundLink")],1),t._v("，其内核用的 "),e("a",{attrs:{href:"https://web.archive.org/web/20051206034449/http://opensource.nokia.com/projects/S60browser/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Webkit"),e("OutboundLink")],1),t._v("，支持 WAP 页面展示。")]),t._v(" "),e("p",[t._v("当前的页面形态还比较简单，加之混合应用还没起来，大部分情况下本地调试即可解决，因此远程调试还不是痛点。")]),t._v(" "),e("p",[t._v("一般还是采用 alert 这样的"),e("strong",[t._v("本地调试")]),t._v("方案。")]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("时间快进到 2009 年，Opera Mobile 10 发布，Symbian 系统可安装下载。")]),t._v(" "),e("p",[t._v("该浏览器牛逼之处在哪？其 "),e("strong",[e("a",{attrs:{href:"https://dev.opera.com/blog/opera-mobile-10-and-its-remote-debugging-party-trick/",target:"_blank",rel:"noopener noreferrer"}},[t._v("支持局域网内远程调试"),e("OutboundLink")],1)]),t._v("，无需 USB ，"),e("strong",[t._v("领先同行数年！甚至如今（2022）Android Chrome 默认都不提供 WIFI 调试")]),t._v("，只能通过一些工具解决（下文会提到）")]),t._v(" "),e("p",[t._v("当前该方案的不足之处在于生态，如果统一市场的是 Opera 而不是 Chrome 的话...")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=sZt-k93qLbg",target:"_blank",rel:"noopener noreferrer"}},[t._v("可以看这个 YouTube 视频"),e("OutboundLink")],1)]),t._v(" "),e("ol",[e("li",[t._v("手机和电脑处于同一局域网")]),t._v(" "),e("li",[t._v("电脑打开 Opera 浏览器，启用远程调试功能（默认开启端口 7001）")]),t._v(" "),e("li",[t._v("手机打开 Opera 浏览器，进入调试页面，输入电脑 ip 和调试端口")]),t._v(" "),e("li",[t._v("电脑展示手机 Opera 浏览器画面，此时可进行调试")])]),t._v(" "),e("h2",{attrs:{id:"阶段-1-webkit-初期-2007"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阶段-1-webkit-初期-2007"}},[t._v("#")]),t._v(" 阶段 1：Webkit 初期 - 2007")]),t._v(" "),e("p",[e("strong",[t._v("2007 年")]),t._v(" 首款 iPhone 和 Android 设备分别发布，自带 Webview 功能（采用的 Webkit 引擎）")]),t._v(" "),e("p",[t._v("那一开始如何进行 Webview 页面调试的呢？")]),t._v(" "),e("ul",[e("li",[t._v("Android：默认不提供调试功能，但提供了一些 "),e("a",{attrs:{href:"https://developer.android.com/guide/webapps/debugging?hl=zh-cn#java",target:"_blank",rel:"noopener noreferrer"}},[t._v("Android API "),e("OutboundLink")],1),t._v("，可以控制页面（注入脚本，获取console 信息）")])]),t._v(" "),e("ul",[e("li",[t._v("iOS：默认提供 Debug Console 功能，可以在页面某个区域上直接展示调试弹窗")])]),t._v(" "),e("p",[e("img",{attrs:{src:r(756),alt:"image.png"}})]),t._v(" "),e("p",[e("img",{attrs:{src:r(757),alt:"image.png"}})]),t._v(" "),e("p",[e("em",[t._v("引自"),e("a",{attrs:{href:"https://maisonbisson.com/post/step-by-step-turn-on-the-iphone-ipads-web-debugging-console/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Step By Step: Turn On The iPhone/iPad’s Web Debugging Console · MaisonBisson"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("首先 iOS 的调试方案不通用，还压缩了页面布局；Android 上调试需要懂 Android 的同学配合。")]),t._v(" "),e("p",[t._v("此时的调试如此麻烦，不如继续使用 alert 。")]),t._v(" "),e("p",[t._v("但 alert 本身就难用，此时有追求的前端同学就诞生了一个想法：")]),t._v(" "),e("p",[e("strong",[t._v("画一个调试框，支持打印输出（重写 console")]),t._v(" "),e("strong",[t._v("api")]),t._v(" "),e("strong",[t._v("），执行输入脚本（eval）")])]),t._v(" "),e("p",[t._v("这也是后面介绍的 vconsole 等解决方案的雏形，但当时大家各做各的，貌似也没有较出名的开源方案。")]),t._v(" "),e("h2",{attrs:{id:"阶段-2-weinre-web-inspector-remote-前端方案-2010"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阶段-2-weinre-web-inspector-remote-前端方案-2010"}},[t._v("#")]),t._v(" 阶段 2：Weinre（"),e("strong",[t._v("We")]),t._v("b "),e("strong",[t._v("In")]),t._v("spector "),e("strong",[t._v("Re")]),t._v("mote）前端方案 - 2010")]),t._v(" "),e("blockquote",[e("p",[t._v("☀️ 聪明的程序员大多是偷懒的")])]),t._v(" "),e("p",[t._v("如果能在电脑上直接调试移动端页面，那效率就大大提高。可是客户端不支持，作为一个前端开发，怎么用前端技术来解决这个问题？")]),t._v(" "),e("p",[e("img",{attrs:{src:r(758),alt:"image.png"}})]),t._v(" "),e("p",[e("strong",[t._v("2010.12")]),t._v(" ，Patrick Mueller 推出了 "),e("a",{attrs:{href:"https://people.apache.org/~pmuellr/weinre/docs/latest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("weinre"),e("OutboundLink")],1),t._v(" 工具，意为 "),e("strong",[t._v("We")]),t._v("b "),e("strong",[t._v("In")]),t._v("spector "),e("strong",[t._v("Re")]),t._v("mote（见 "),e("a",{attrs:{href:"https://people.apache.org/~pmuellr/weinre/docs/latest/ChangeLog.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("weinre - ChangeLog"),e("OutboundLink")],1),t._v("）")]),t._v(" "),e("p",[t._v("weinre 由三部分组成")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("本地调试器（Debug Client）")]),t._v(" : 用的是 Webkit 的 Web Inspector")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[t._v("服务端（Debug Server）")]),t._v(" ：本地起的 http 服务（weinre 采用的 node 技术），用来与 Debug Client 和 Debug Target 进行通信")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("strong",[t._v("目标页面（Debug Target）")]),t._v(" ：移动端上的目标调试页面，需要在页面上注入一段 weinre 脚本，该脚本会与 Debug Server 进行通信，将当前页面的调试信息发往 Debug Server ，或收取 Debug Server 的信息来控制 Debug Target")])]),t._v(" "),e("p",[e("img",{attrs:{src:r(759),alt:"image.png"}})]),t._v(" "),e("p",[t._v("weinre 的原理如下：")]),t._v(" "),e("ol",[e("li",[t._v("Debug Target 和 Debug Client 使用同一套调试协议（Webkit Devtools Protocol）")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("Debug Target 收到 Debug Client 的操作请求，将其解析为具体的 JS 操作，作用到当前页面并返回结果响应")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("Debug Target 内部也会监听一些事件，比较网络请求、日志输出，并将结果主动推到 Debug Client")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("Debug Target 和 Debug Client 使用 Debug Server 进行中转，支持多页调试。（"),e("strong",[t._v("经典的发布订阅模式")]),t._v("）")])]),t._v(" "),e("p",[e("img",{attrs:{src:r(760),alt:"image.png"}})]),t._v(" "),e("p",[t._v("以最常用的「"),e("strong",[t._v("Console 面板执行代码")]),t._v("」为例：")]),t._v(" "),e("ol",[e("li",[t._v("重写页面全局 API ，包括 console 等")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("收到「执行代码」请求，使用 eval 执行代码，并将结果作为响应返回")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("如果直接过程中出现输出，则主动发起「输出日志」的请求")])]),t._v(" "),e("blockquote",[e("p",[e("em",[e("strong",[t._v("weinre")])]),t._v(" 使用纯前端能力，没有用到任何 native 能力。")]),t._v(" "),e("p",[t._v("因此其功能有限，比如无法调试源码、监控所有请求（可以想一下为什么）。")])]),t._v(" "),e("p",[t._v("但 "),e("em",[e("strong",[t._v("weinre")])]),t._v(" 提供了一个思路，即纯前端可以实现基础能力的任意远程调试")]),t._v(" "),e("h2",{attrs:{id:"阶段-3-usb-连接调试-2012"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阶段-3-usb-连接调试-2012"}},[t._v("#")]),t._v(" 阶段 3：USB 连接调试 - 2012")]),t._v(" "),e("p",[t._v("weinre 方案故好，但还是缺少诸如完整的元素面板、完整的请求列表面板。")]),t._v(" "),e("p",[t._v("于是，轮到操作系统开始卷了。")]),t._v(" "),e("ul",[e("li",[t._v("2012.9 苹果发布了 "),e("a",{attrs:{href:"https://zh.m.wikipedia.org/zh/IOS_6",target:"_blank",rel:"noopener noreferrer"}},[t._v("iOS 6"),e("OutboundLink")],1),t._v(" ，其"),e("a",{attrs:{href:"https://firt.dev/ios-6/",target:"_blank",rel:"noopener noreferrer"}},[t._v("支持远程调试"),e("OutboundLink")],1)])]),t._v(" "),e("ul",[e("li",[t._v("2013.11 谷歌发布了 Android 4.4 ，使用 chromium 作为 webview，可以配合桌面 Chrome Devtools"),e("a",{attrs:{href:"https://developer.chrome.com/docs/devtools/remote-debugging/webviews/",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 实现远程调试"),e("OutboundLink")],1)])]),t._v(" "),e("p",[e("img",{attrs:{src:r(761),alt:"image.png"}})]),t._v(" "),e("p",[t._v("此时的"),e("strong",[t._v("远程调试四要素")]),t._v("如下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("四要素")]),t._v(" "),e("th",[e("strong",[t._v("iOS")])]),t._v(" "),e("th",[e("strong",[t._v("Android")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[t._v("调试界面（client）")])]),t._v(" "),e("td",[t._v("Safari Web Inspector")]),t._v(" "),e("td",[t._v("Chrome Devtools")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("目标调试服务（server）")])]),t._v(" "),e("td",[t._v("iOS Webview")]),t._v(" "),e("td",[t._v("Android Webview")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("调试协议（protocol）")])]),t._v(" "),e("td",[t._v("Webkit Devtools Protocol")]),t._v(" "),e("td",[t._v("Chrome Devtools Protocol")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("传输通道（transport channel）")])]),t._v(" "),e("td",[t._v("USB 请求转发")]),t._v(" "),e("td",[t._v("USB 请求转发")])])])]),t._v(" "),e("p",[t._v("该阶段能够"),e("strong",[t._v("实现完整的调试能力")]),t._v("，但"),e("strong",[t._v("引入了 USB 作为调试通道")]),t._v("，增加了远程调试成本，且不适用于跨地远程调试")]),t._v(" "),e("h2",{attrs:{id:"阶段-4-前端模拟-cdp-2016"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阶段-4-前端模拟-cdp-2016"}},[t._v("#")]),t._v(" 阶段 4：前端模拟 CDP - 2016")]),t._v(" "),e("p",[t._v("CDP，即 Chrome Devtools Protocol 。随着 Chrome 的优化，Safari 、Firefox 和 IE 等浏览器的没落，社区上使用 Chrome Devtools 调试的占比越来越大。")]),t._v(" "),e("p",[t._v("这个阶段其实没有什么创新性的突破，而是将原来的调试体系往 CDP 靠拢，社区出了如下方案：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/google/ios-webkit-debug-proxy",target:"_blank",rel:"noopener noreferrer"}},[t._v("ios-webkit-debug-proxy"),e("OutboundLink")],1),t._v(" ：基于 USB 连接，使用 Chrome Devtools 调试 iOS Safari ，随着 Chrome Devtools Protocol 越发不兼容 webkit protocol，现在已无法单独使用，需要配合如下工具")])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/RemoteDebug/remotedebug-ios-webkit-adapter",target:"_blank",rel:"noopener noreferrer"}},[t._v("remotedebug-ios-webkit-adapter"),e("OutboundLink")],1),t._v(" ：协议适配器，将 webkit protocol 转换为 Chrome Devtools Protocol")])]),t._v(" "),e("p",[t._v("而在基于 WIFI 通道的调试方案上，weinre 已不再兼容 Chrome Devtools Protocol ，于是社区又出了一款代替 weinre 的方案 -- "),e("a",{attrs:{href:"https://github.com/liriliri/chii",target:"_blank",rel:"noopener noreferrer"}},[t._v("chii"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("于 2020.4 推出，对标 weinre 的能力，只是将 webkit protocol 改为 Chrome Devtools Protocol ，weinre 无法获取到的，chii 也无法获取，比如网络只能捕获 xhr")])]),t._v(" "),e("p",[t._v("于此同时，原先的「页面展示一个调试窗口」也出了几种较为好用的方案：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/Tencent/vConsole",target:"_blank",rel:"noopener noreferrer"}},[t._v("vConsole"),e("OutboundLink")],1),t._v(" ：目标是更轻量的 console 控制器，由 Tencent 前端团队于 "),e("strong",[t._v("2016.4")]),t._v(" 开源")])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/liriliri/eruda",target:"_blank",rel:"noopener noreferrer"}},[t._v("eruda"),e("OutboundLink")],1),t._v("：2017.3 推出，和 chii 是同一个作者")])]),t._v(" "),e("p",[e("strong",[t._v("简单总结下这个阶段：工具不断优化，并往 Chrome Devtools 调试靠拢")])]),t._v(" "),e("h2",{attrs:{id:"阶段-5-wifi-cdp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阶段-5-wifi-cdp"}},[t._v("#")]),t._v(" 阶段 5：WIFI + CDP")]),t._v(" "),e("p",[t._v("前面提到，社区调试方案逐步迁移到 Chrome Devtools 的调试体系，包括：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("USB 连接调试")]),t._v("，支持 Chrome Devtools 调试 iOS 和 Android （完整的调试能力）")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("前端模拟")]),t._v(" "),e("strong",[t._v("CDP")]),t._v("：基于纯前端能力，支持 Chrome Devtools 调试 iOS 和 Android（部分调试能力）")])]),t._v(" "),e("p",[t._v("现在还有一个问题没有解决："),e("strong",[t._v("如何基于 WIFI 通道完整的调试")]),t._v(" "),e("strong",[t._v("Hybrid")]),t._v(" "),e("strong",[t._v("页面？")])]),t._v(" "),e("blockquote",[e("p",[t._v("解决了这个问题，我们就能抛开物理限制，实现跨地区的完整的远程调试")])]),t._v(" "),e("p",[t._v("在分析这个问题之前，我们需要先解决如下问题：")]),t._v(" "),e("ul",[e("li",[t._v("USB 调试的原理是什么？")])]),t._v(" "),e("ul",[e("li",[t._v("怎么将 USB 通道替换为 WIFI 通道？")])]),t._v(" "),e("h3",{attrs:{id:"android-usb-调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-usb-调试"}},[t._v("#")]),t._v(" Android USB 调试")]),t._v(" "),e("p",[t._v("Android 和 iOS 的 USB 调试过程不太一样，这里先讲 Android 的")]),t._v(" "),e("hr"),t._v(" "),e("h4",{attrs:{id:"android-usb-调试原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-usb-调试原理"}},[t._v("#")]),t._v(" Android USB 调试原理")]),t._v(" "),e("p",[e("img",{attrs:{src:r(762),alt:""}})]),t._v(" "),e("p",[t._v("Android Chrome 在开启调试模式后，会启动 Unix Domain Socket Server（"),e("strong",[t._v("固定端口 9229")]),t._v("） ，对其发送 "),e("code",[t._v("/json/list")]),t._v("请求可以获得可调试的页面列表；创建 socket client 并连上该 Server ，找到目标调试页面，对其收发 cdp 数据包，即可控制相应页面或者收到该页面的调试信息。")]),t._v(" "),e("p",[t._v("使用 usb 调试，实际是使用 "),e("strong",[t._v("adb")]),t._v(" 做了一层端口转发")]),t._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("adb forward tcp:9229 tcp:9229\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("strong",[t._v("本地访问 9229 端口实际访问的是 Android 内部的 9229 端口")])]),t._v(" "),e("p",[t._v("PC 启动调试工具时，会创建一个 "),e("code",[t._v("socket client")]),t._v("，接着再通过 adb 连上了 "),e("code",[t._v("Unix Domain Socket Server")]),t._v(" ，此后即可就进行 cdp 进行通信。")]),t._v(" "),e("h4",{attrs:{id:"android-绕过-usb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-绕过-usb"}},[t._v("#")]),t._v(" Android 绕过 USB")]),t._v(" "),e("p",[t._v("解决方案其实很简单，加一层 "),e("strong",[t._v("websocket")]),t._v(" 进行中转")]),t._v(" "),e("p",[e("img",{attrs:{src:r(763),alt:"image.png"}})]),t._v(" "),e("p",[t._v("在 Android App 内部启动 2 个 socket client :")]),t._v(" "),e("ul",[e("li",[t._v("一个连接 "),e("code",[t._v("Unix Domain Socket Server")]),t._v(" 收发数据，")])]),t._v(" "),e("ul",[e("li",[t._v("另外一个连接 PC 的 "),e("code",[t._v("socket server")]),t._v(" 用来中转数据")])]),t._v(" "),e("p",[t._v("然后 PC 的 socket server 再转发 CDP 数据给 "),e("code",[t._v("Chrome Devtools")])]),t._v(" "),e("hr"),t._v(" "),e("h3",{attrs:{id:"ios-usb-调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ios-usb-调试"}},[t._v("#")]),t._v(" iOS USB 调试")]),t._v(" "),e("h4",{attrs:{id:"ios-usb-调试原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ios-usb-调试原理"}},[t._v("#")]),t._v(" iOS USB 调试原理")]),t._v(" "),e("p",[t._v("iOS 和 Mac 之间进行 USB 通信，采用的是 USB 协议称之为 "),e("code",[t._v("usbmux")]),t._v(" ，其本身是私有协议，用于自身应用使用，但是都被破解得差不多了...")]),t._v(" "),e("p",[e("code",[t._v("usbmuxd")]),t._v(" 是 usbmux 协议的实现，是一个守护进程，随 iOS 设备和 Mac 设备的系统启动而启动，当 iOS 设备连接上 Mac ，之间的 usb 通信将通过 usbmuxd 这个中间服务进行")]),t._v(" "),e("p",[e("img",{attrs:{src:r(764),alt:""}})]),t._v(" "),e("p",[t._v("于是如果我们知道了 Web 远程调试对应的 USB 协议，那么就可以取代 Safari Inspector ，实现自己的调试终端。")]),t._v(" "),e("blockquote",[e("p",[t._v("相关的调试协议可以通过这个仓库找到 "),e("a",{attrs:{href:"https://github.com/google/ios-webkit-debug-proxy",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub - google/ios-webkit-debug-proxy: A DevTools proxy (Chrome Remote Debugging Protocol) for iOS "),e("OutboundLink")],1),t._v("，感兴趣的自行查阅")])]),t._v(" "),e("h4",{attrs:{id:"ios-绕过-usb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ios-绕过-usb"}},[t._v("#")]),t._v(" iOS 绕过 USB")]),t._v(" "),e("p",[t._v("同 Android ，要想取消 USB ，我们也需要启动了一个 websocket 来做指令中转。")]),t._v(" "),e("p",[t._v("要做指令中转，我们首先需要"),e("strong",[t._v("找到远程调试服务的端口")]),t._v("。那么问题来了：iOS 的远程调试服务端口是多少？")]),t._v(" "),e("p",[t._v("不像 Android 的调试端口是固定的，iOS 设备的内部服务是启动时动态注册的。")]),t._v(" "),e("p",[t._v("对于这个问题，iOS 提供了一种类似「门卫」的解决方案：内部运行一个守护进程（lockdown），运行在固定端口（"),e("strong",[t._v("62078")]),t._v("），支持系统服务访问能力。")]),t._v(" "),e("p",[e("img",{attrs:{src:r(765),alt:"image.png"}})]),t._v(" "),e("p",[t._v("于是可以先通过该服务找到 Web 调试服务（com.apple.webinspector）的端口，之后的过程和 Android 一样了。")]),t._v(" "),e("h3",{attrs:{id:"方案缺陷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案缺陷"}},[t._v("#")]),t._v(" 方案缺陷")]),t._v(" "),e("p",[t._v("首先是使用成本，本地需要另外启动一个 socket server 服务。")]),t._v(" "),e("p",[t._v("那么把 socket server 服务部署在线上呢？的确可以降低用户的使用成本，比如我司的调试基建方案。")]),t._v(" "),e("p",[t._v("但是相应的，网络链路变长了，"),e("strong",[t._v("容易出现时延问题")]),t._v("，如果是居家办公不在同一个办公网的话就更严重了。。")]),t._v(" "),e("h1",{attrs:{id:"方案对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案对比"}},[t._v("#")]),t._v(" 方案对比")]),t._v(" "),e("p",[t._v("打分规则：")]),t._v(" "),e("ul",[e("li",[t._v("不支持为 ❌")])]),t._v(" "),e("ul",[e("li",[t._v("支持，结合可用性和易用性打分，1~3 颗 ⭐")])]),t._v(" "),e("p",[e("img",{attrs:{src:r(766),alt:"image.png"}})]),t._v(" "),e("blockquote",[e("p",[t._v("点击放大查看~")])]),t._v(" "),e("h1",{attrs:{id:"最佳实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[t._v("#")]),t._v(" 最佳实践")]),t._v(" "),e("ol",[e("li",[t._v("如果需要远程调试其他用户的页面")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("页面类型")])]),t._v(" "),e("th",[e("strong",[t._v("最佳方案")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("公司内测 App web 页面")]),t._v(" "),e("td",[t._v("推动公司基建部门建设 「"),e("strong",[t._v("WIFI 调试")]),t._v("」方案，否则使用「"),e("strong",[t._v("其他 web 页面")]),t._v("」方案")])]),t._v(" "),e("tr",[e("td",[t._v("公司线上 App web 页面")]),t._v(" "),e("td",[t._v("若需要"),e("strong",[t._v("完整")]),t._v("的调试能力，下载对应版本 app 的内测包，然后同「"),e("strong",[t._v("公司内测 App web 页面")]),t._v("」-   若仅仅是简单调试 console，同 「"),e("strong",[t._v("其他 web 页面")]),t._v("」")])]),t._v(" "),e("tr",[e("td",[t._v("其他 web 页面（如微信页、浏览器 Web）")]),t._v(" "),e("td",[t._v("自行搭建 "),e("a",{attrs:{href:"https://github.com/liriliri/chii",target:"_blank",rel:"noopener noreferrer"}},[t._v("chii"),e("OutboundLink")],1),t._v(" ；如果仅查看输出，直接用 "),e("a",{attrs:{href:"https://github.com/Tencent/vConsole",target:"_blank",rel:"noopener noreferrer"}},[t._v("vConsole"),e("OutboundLink")],1),t._v(" 、 "),e("a",{attrs:{href:"https://github.com/liriliri/eruda",target:"_blank",rel:"noopener noreferrer"}},[t._v("eruda"),e("OutboundLink")],1)])])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("如果是本地调试自己的手机页面")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("页面类型")])]),t._v(" "),e("th",[e("strong",[t._v("最佳方案")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("公司内测 App web 页面")]),t._v(" "),e("td",[t._v("推动公司基建部门建设 「"),e("strong",[t._v("WIFI 调试")]),t._v("」方案，否则使用「"),e("strong",[t._v("其他 web 页面")]),t._v("」方案")])]),t._v(" "),e("tr",[e("td",[t._v("公司线上 App web 页面")]),t._v(" "),e("td",[t._v("若需要"),e("strong",[t._v("完整")]),t._v("的调试能力，下载对应版本 app 的内测包，然后同「"),e("strong",[t._v("公司内测 App web 页面")]),t._v("」-   若仅仅是简单调试 console，同 「"),e("strong",[t._v("其他 web 页面")]),t._v("」")])]),t._v(" "),e("tr",[e("td",[t._v("原生浏览器页面")]),t._v(" "),e("td",[t._v("打开手机调试设置，连接 USB 调试页面。如果不想用 Safari 调试 iOS 页面，需要自行部署 "),e("a",{attrs:{href:"https://github.com/google/ios-webkit-debug-proxy",target:"_blank",rel:"noopener noreferrer"}},[t._v("ios-webkit-debug-proxy"),e("OutboundLink")],1)])]),t._v(" "),e("tr",[e("td",[t._v("其他 App 页面")]),t._v(" "),e("td",[t._v("如果仅查看输出，直接用 "),e("a",{attrs:{href:"https://github.com/Tencent/vConsole",target:"_blank",rel:"noopener noreferrer"}},[t._v("vConsole"),e("OutboundLink")],1),t._v(" 、 "),e("a",{attrs:{href:"https://github.com/liriliri/eruda",target:"_blank",rel:"noopener noreferrer"}},[t._v("eruda"),e("OutboundLink")],1),t._v(" 页面内调试；否则可用采用「"),e("strong",[t._v("前端模拟 CDP 远程调试")]),t._v("」方案："),e("a",{attrs:{href:"https://github.com/liriliri/chii",target:"_blank",rel:"noopener noreferrer"}},[t._v("chii"),e("OutboundLink")],1)])])])]),t._v(" "),e("h1",{attrs:{id:"未来畅想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#未来畅想"}},[t._v("#")]),t._v(" 未来畅想")]),t._v(" "),e("p",[t._v("上面讲了这么多，我们会发现调试方案非常的零碎，或者落地成本较高")]),t._v(" "),e("p",[t._v("我们希望未来的远程调试是这样的")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th"),t._v(" "),e("th")])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[t._v("统一的调试协议")])]),t._v(" "),e("td",[t._v("CDP")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("统一的调试终端")])]),t._v(" "),e("td",[t._v("Chrome Devtools")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("统一的调试地址配置")])]),t._v(" "),e("td",[t._v("允许手机配置本地调试的 Socket Server 地址，开启开发者模式后，所有浏览器 Web 页和内测 App Web 页将自动连上该 Socket Server ，PC 调试工具再与该 Server 通信（参考 Opera ，兼顾安全和效率）")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("复用 Chrome Extension 能力")])]),t._v(" "),e("td",[t._v("支持 React Devtools、Vue Devtools 等")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("高效、安全、稳定的通信通道")])]),t._v(" "),e("td",[t._v("自动选择最优，通道包括 wifi、蓝牙、usb")])])])]),t._v(" "),e("p",[t._v("第三点需要操作系统支持，其他的属于上层方案，总是可以实现。")]),t._v(" "),e("p",[t._v("未来可期~")]),t._v(" "),e("h1",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://zyqhi.github.io/2019/08/20/usbmuxd-protocol.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("usbmux协议分析 - Lazy Eval"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://fed.taobao.org/blog/taofed/do71ct/chrome-remote-debugging-technics/",target:"_blank",rel:"noopener noreferrer"}},[t._v("揭秘浏览器远程调试技术"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://fed.taobao.org/blog/taofed/do71ct/webkit-remote-debug-action/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Webkit远程调试协议实战"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://fed.taobao.org/blog/taofed/do71ct/webkit-remote-debug-test/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Webkit 远程调试协议初探"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/382341601",target:"_blank",rel:"noopener noreferrer"}},[t._v("干货｜一定要知道的抖音小程序/小游戏调试原理！"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/7070124427882528798",target:"_blank",rel:"noopener noreferrer"}},[t._v("iOS自动化测试驱动工具探索 - 掘金"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.infoq.cn/article/2011/08/mobile-web-debugging",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web应用调试：现在是Weinre和JSConsole，最终会是WebKit的远程调试协议_Java_Werner Schuster_InfoQ精选文章"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://byteage.com/1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("在越狱设备调试任意 iOS App 的 WebView - 字节时代"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.wwshidai.com/11051.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("wap是什么渠道的简称（wap的另一层意思）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.infoq.cn/article/hybrid-app",target:"_blank",rel:"noopener noreferrer"}},[t._v("跨终端Web之Hybrid App_移动_徐凯_InfoQ精选文章"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=v.exports},753:function(t,e,r){t.exports=r.p+"assets/img/f43b57b757874127bdbc8aae21aa4eab.ef973317.png"},754:function(t,e,r){t.exports=r.p+"assets/img/57709bc06fe74bb1b25f1de666764097.7467bb5b.png"},755:function(t,e,r){t.exports=r.p+"assets/img/4d01447fe4c343f894fe4706313c1e3b.785f1805.png"},756:function(t,e,r){t.exports=r.p+"assets/img/353aea20acfb426f8c2409643061a5e1.15d606c8.png"},757:function(t,e,r){t.exports=r.p+"assets/img/9dca53ce950f4d458af9eb9e9f1c54b5.42c8f4d0.png"},758:function(t,e,r){t.exports=r.p+"assets/img/c0ab0f108c9342daa3e26b12b24996db.81d0e6d9.png"},759:function(t,e,r){t.exports=r.p+"assets/img/7ab291405b324f4183621f9403705f71.574af859.png"},760:function(t,e,r){t.exports=r.p+"assets/img/2a5c017f3d93449eac68907f8a3776c3.51e39974.png"},761:function(t,e,r){t.exports=r.p+"assets/img/b208e2d14be546deb0c5987700386324.708a2dcc.png"},762:function(t,e,r){t.exports=r.p+"assets/img/1ee097a2210a41f381043860627e6e56.a7fe7b69.png"},763:function(t,e,r){t.exports=r.p+"assets/img/c9f0ef280c564fb396e266beb7c9803a.8f156f6d.png"},764:function(t,e,r){t.exports=r.p+"assets/img/683f478ff7d64336aa42b228d7bc60d0.b7d12199.png"},765:function(t,e,r){t.exports=r.p+"assets/img/fbda57a05c994f4081465f007166bd37.7e253448.png"},766:function(t,e,r){t.exports=r.p+"assets/img/bedbb149320d41028254d29f8118b55b.72cd7e59.png"}}]);