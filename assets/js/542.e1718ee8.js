(window.webpackJsonp=window.webpackJsonp||[]).push([[542],{1454:function(v,_,n){"use strict";n.r(_);var r=n(30),a=Object(r.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("这是最近面试 bd 时面试官问的一个问题，当时没有回答上来。")]),v._v(" "),_("p",[v._v("本篇就以问答的形式来讲解这题。当然以下内容纯属虚构，只是为了说明大厂面试是一环扣一环的。或许当你成为面试官时也可以采用这种形式。")]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("“我看你简历上说使用过 canvas ，能说说什么是 canvas 污染么？”"),_("br"),v._v("\n“将一张跨域的图片绘制到 canvas 上，这个 canvas 就是被污染的，此时无法读取该 canvas 的数据。”")]),v._v(" "),_("p",[v._v("“那你能说说浏览器为什么要做这个限制？”"),_("br"),v._v("\n“为了用户的安全。” 由于之前没有思考过，又不想承认不会，我随口一说。")]),v._v(" "),_("p",[v._v("“能具体讲讲么？” 面试官似乎读出了我言语中的犹豫。"),_("br"),v._v("\n“嗯。。。让我想想。” 先稳住，假装不慌，其实内心慌得一p。"),_("br"),v._v("\n“这个是同源策略的限制。应该是为了避免第三方网站读取其他网站的图片数据，避免用户隐私泄露。比如已知某个隐私图片的 url，进入第三方网站后，可以请求到该图片，如果不做数据读取限制的话，该数据将被传送到网站后台进而导致信息泄露。”")]),v._v(" "),_("p",[v._v("“很好。那如果是我们自己的网站要用，有什么解决方案？”"),_("br"),v._v("\n“嗯，这个要看能否控制图片的响应了。如果可以控制的话，利用 cors 跨域，并在图片请求发起时增加 "),_("code",[v._v('crossOrigin = "Anonymous"')]),v._v(" 设置；否则只能自己的网站做个代理，让网站与图片同源。”")]),v._v(" "),_("p",[v._v("“你刚刚有提到同源，那你说说为什么浏览器会有同源策略？”"),_("br"),v._v("\n“为了限制其他源文档或脚本与当前源的资源进行交互。主要有两个地方：一个是 iframe 节点访问控制，如果没有同源策略限制的话，iframe 可以随意访问其他非同源 iframe 的 dom 节点，如钓鱼网站嵌套了一个银行网站的 iframe ，从外部就可以读取到内部密码输入框的值。另一个是 http 响应控制，如果没有同源策略限制的话，在第三方网站直接对其他网站发起请求，可以读取到响应，这样就可以获取用户的个人信息，造成隐私泄露。”")]),v._v(" "),_("p",[v._v("“很好，你刚刚说到响应控制，那请求是成功的么？”"),_("br"),v._v("\n“能成功发起请求，也能携带 "),_("code",[v._v("SameSite=None")]),v._v(" 的 cookie ，这个就是另一个 csrf 攻击的话题了。 但是能否收到响应和操作及跨域配置有关，对于跨域读操作（脚本访问跨域资源），是受到跨域限制的，需要进行 cors 处理。”")]),v._v(" "),_("p",[v._v("...中间又穿插了 csrf 等各种前端安全的问题。")]),v._v(" "),_("p",[v._v("“回到 canvas，最后再问一个问题，说说 canvas 性能分析和常见的渲染优化策略？”"),_("br"),v._v("\n“不太了解。。”"),_("br"),v._v("\n“好吧，我们下一篇文章见。”")]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("如有错误，欢迎指正")])])}),[],!1,null,null,null);_.default=a.exports}}]);