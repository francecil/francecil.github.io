(window.webpackJsonp=window.webpackJsonp||[]).push([[385],{1278:function(t,n,i){"use strict";i.r(n);var a=i(30),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"求-32位无符号整数-前导0个数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#求-32位无符号整数-前导0个数"}},[t._v("#")]),t._v(" 求 32位无符号整数 前导0个数")]),t._v(" "),n("h4",{attrs:{id:"注意使用场景-一般会用该方法的前导0个数不会少"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意使用场景-一般会用该方法的前导0个数不会少"}},[t._v("#")]),t._v(" 注意使用场景，一般会用该方法的前导0个数不会少")]),t._v(" "),n("h4",{attrs:{id:"汇编中逻辑右移可直接用指令-shr-reg-men-n-即物理上-a-2-比-a-1-1-快"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#汇编中逻辑右移可直接用指令-shr-reg-men-n-即物理上-a-2-比-a-1-1-快"}},[t._v("#")]),t._v(" 汇编中逻辑右移可直接用指令 "),n("code",[t._v("SHR reg/men ,n")]),t._v(" 即物理上 a>>2 比 (a>>1)>>1 快")]),t._v(" "),n("p",[t._v("首先想到的肯定是循环遍历")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public static int numberOfLeadingZerosByLoop(int i){\n\t\tif(i==0)return 32;\n\t\tint n=0;\n\t\twhile(i>>31==0){\n\t\t\tn++;\n\t\t\ti<<=1;\n\t\t}\n\t\treturn n;\n\t}\n")])])]),n("blockquote",[n("p",[t._v("实现简单，但平均时间略高")])]),t._v(" "),n("p",[t._v("源码实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public static int numberOfLeadingZeros(int i) {\n        // HD, Figure 5-6\n        if (i == 0)\n            return 32;\n        int n = 1;\n        if (i >>> 16 == 0) { n += 16; i <<= 16; }\n        if (i >>> 24 == 0) { n +=  8; i <<=  8; }\n        if (i >>> 28 == 0) { n +=  4; i <<=  4; }\n        if (i >>> 30 == 0) { n +=  2; i <<=  2; }\n        n -= i >>> 31;\n        return n;\n    }\n")])])]),n("blockquote",[n("p",[t._v("二分判断，快速，且每次操作把两种情况合成一种")])]),t._v(" "),n("h2",{attrs:{id:"求后缀0个数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#求后缀0个数"}},[t._v("#")]),t._v(" 求后缀0个数")]),t._v(" "),n("p",[t._v("同理，")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("  public static int numberOfTrailingZeros(int i) {\n        // HD, Figure 5-14\n        int y;\n        if (i == 0) return 32;\n        int n = 31;\n        y = i <<16; if (y != 0) { n = n -16; i = y; }\n        y = i << 8; if (y != 0) { n = n - 8; i = y; }\n        y = i << 4; if (y != 0) { n = n - 4; i = y; }\n        y = i << 2; if (y != 0) { n = n - 2; i = y; }\n        return n - ((i << 1) >>> 31);\n    }\n")])])]),n("h2",{attrs:{id:"求二进制数中1的个数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#求二进制数中1的个数"}},[t._v("#")]),t._v(" 求二进制数中1的个数")]),t._v(" "),n("p",[t._v("常规做法，循环按位与1")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public static int bitCountByLoop(int i) {\n\t\tint n=0;\n\t\twhile(i!=0){\n//\t\t\t等效于 if((i&1)==1)n++;\n\t\t\tn+=i&1;\n\t\t\ti>>=1;\n\t\t}\n\t\treturn n;\n    }\n")])])]),n("p",[t._v("复杂度与下面这种一致\n利用符号位是否>=0 判断1的个数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public static int bitCountByZF(int i) {\n\t\tint n=0;\n\t\twhile(i!=0){\n\t\t\tif(i<0)n++;\n\t\t\ti<<=1;\n\t\t}\n\t\treturn n;\n    }\n")])])]),n("blockquote",[n("p",[t._v("复杂度扔为O(log2n)")])]),t._v(" "),n("p",[t._v("若让算法的运算次数只与“ 1 ”的个数有关,复杂度可降低\n"),n("strong",[t._v("利用 "),n("code",[t._v("x&x-1")]),t._v(" 会消去最末位1的思路")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public static int bitCountByAWY(int i) {\n\t\tint n=0;\n\t\twhile(i!=0){\n\t\t\ti&=i-1;\n\t\t\tn++;\n\t\t}\n\t\treturn n;\n    }\n")])])]),n("blockquote",[n("p",[t._v("上面 这种方法效率已经很高了，只与1的个数有关\n那JDK源码实现呢？看懂和写出代码果然是两种不一样的境界。。。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("    // 二分法 求32位整数中1的个数\n\tpublic static int bitCount(int i) {\n\t\t// 2位为一组，例 i=11100001 i>>>1 =01110000\n\t\t// 01110000 & 0101 0101 = 01010000\n\t\t//i=11100001 - 01010000= 10010001\n\t\t//11100001 每2位一组1的个数为 2 1 0 1 即10010001\n        i = i - ((i >>> 1) & 0x55555555);\n        //计算每4位一组1的个数\n        //i&0x33333333 -> 10010001 & 00110011 =0001 0001\n        //(10010001 >>> 2) & 0x33333333 ->01001000 & 00110011=0001 0000\n        //i=0001 0001 + 0001 0000 =0010 0001    2 1\n        i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n        //计算每8位一组1的个数\n        i = (i + (i >>> 4)) & 0x0f0f0f0f;\n        //计算每16位一组1的个数\n        i = i + (i >>> 8);\n        //计算每32位一组1的个数\n        i = i + (i >>> 16);\n        return i & 0x3f;\n    }\n")])])]),n("p",[t._v("另外还有一种叫 HAKMEM 算法的，没研究")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("private int HAKMEM (int x) {  \n       int n;     \n       n = (x >> 1) & 033333333333;     \n       x = x - n;    \n       n = (n >> 1) & 033333333333;     \n       x = x - n;     \n       x = (x + (x >> 3)) & 030707070707;    \n       x = x%63;   \n       return x;    \n     }  \n")])])]),n("p",[t._v("ref:"),n("a",{attrs:{href:"http://15838341661-139-com.iteye.com/blog/1642525",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://15838341661-139-com.iteye.com/blog/1642525"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"保留最高位1-其余全部置0"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#保留最高位1-其余全部置0"}},[t._v("#")]),t._v(" 保留最高位1，其余全部置0")]),t._v(" "),n("p",[t._v("还是2分的思路，源码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("public static int highestOneBit(int i) {\n    // HD, Figure 3-1\n    i |= (i >>  1);\n    i |= (i >>  2);\n    i |= (i >>  4);\n    i |= (i >>  8);\n    i |= (i >> 16);\n    return i - (i >>> 1);\n}\n")])])]),n("h2",{attrs:{id:"未完待续"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#未完待续"}},[t._v("#")]),t._v(" 未完待续")])])}),[],!1,null,null,null);n.default=e.exports}}]);