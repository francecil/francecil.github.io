(window.webpackJsonp=window.webpackJsonp||[]).push([[310],{1092:function(t,e,n){"use strict";n.r(e);var r=n(30),a=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("关于browser 2 browser的网上文章很多，我就不介绍了。")]),t._v(" "),e("p",[t._v("可以参考我的这篇文章"),e("a",{attrs:{href:"https://www.hongweipeng.com/index.php/archives/835/",target:"_blank",rel:"noopener noreferrer"}},[t._v("流媒体直播——资料整理、你想要了解的都在这"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("里面给的链接可以去看看")]),t._v(" "),e("p",[t._v("这边我要讲的是"),e("strong",[t._v("WebRTC编译后的执行文件")]),t._v("和"),e("strong",[t._v("Web端")]),t._v("进行交互。")]),t._v(" "),e("p",[e("strong",[t._v("首先要明确的是")]),t._v("，browser 2 browser的应用场景太狭小了：视频通话...")]),t._v(" "),e("p",[t._v("而编译WebRTC我们就可以做更多的事：屏幕共享.. 录播.. 远程教育【切换通话和屏幕】..")]),t._v(" "),e("p",[t._v("因为视频源我们是可控的，不像 Web. 【其实b2b也可以做屏幕共享，不过c2b会比较可控】")]),t._v(" "),e("p",[t._v("编译WebRTC是一件麻烦的事，可以参考上面那篇文章。\n这里我直接给出两个可运行程序")]),t._v(" "),e("blockquote",[e("p",[t._v("下载地址："),e("a",{attrs:{href:"http://pan.baidu.com/s/1bVpx9O",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://pan.baidu.com/s/1bVpx9O"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("如果网盘挂了请提醒我")]),t._v(" "),e("h1",{attrs:{id:"流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程"}},[t._v("#")]),t._v(" 流程")]),t._v(" "),e("p",[t._v("先用起来吧，虽然js有注释，不过我后面还是会详细解析的。")]),t._v(" "),e("h2",{attrs:{id:"构架web端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构架web端"}},[t._v("#")]),t._v(" 构架Web端")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("新建一个文件夹作为该web项目的根目录，就叫WebrtcTEST吧")])]),t._v(" "),e("li",[e("p",[t._v("在根目录下新建js文件夹")])]),t._v(" "),e("li",[e("p",[t._v("下载"),e("a",{attrs:{href:"https://www.hongweipeng.com/usr/uploads/2016/08/2467397271.rar",target:"_blank",rel:"noopener noreferrer"}},[t._v("所需js文件.rar"),e("OutboundLink")],1),t._v("并解压，把得到的文件放入js文件夹中。")])]),t._v(" "),e("li",[e("p",[t._v("根目录下新建test.html文件，代码如下")]),t._v("\n <!DOCTYPE html>\n "),e("html",[e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(' <head>\n \t<meta charset="utf-8" />\n \t<title>游戏</title>\n \t<script type="text/javascript" src="./jquery-1.11.1.min.js"><\/script>\n \t<script type="text/javascript" src="./adapter.js"><\/script>\n \t\x3c!--<script type="text/javascript" src="./adapter_no_global.js"><\/script>--\x3e\n \t<script>\n \t\tvar request = null;\n \t\tvar hangingGet = null;\n \t\tvar localName;\n \t\tvar server;\n \t\tvar my_id = -1;\n \t\t//记录其他peer\n \t\tvar other_peers = {};\n \t\tvar message_counter = 0;\n\n \t\t// added stuff start \n \t\tvar pc;\n \t\t//constraints for desktop browser \n \t\tvar desktopConstraints = {\n\n \t\t\tvideo: {\n \t\t\t\tmandatory: {\n \t\t\t\t\tmaxWidth: 800,\n \t\t\t\t\tmaxHeight: 600\n \t\t\t\t}\n \t\t\t},\n\n \t\t\taudio: true\n \t\t};\n\n \t\t//constraints for mobile browser \n \t\tvar mobileConstraints = {\n\n \t\t\tvideo: {\n \t\t\t\tmandatory: {\n \t\t\t\t\tmaxWidth: 480,\n \t\t\t\t\tmaxHeight: 320,\n \t\t\t\t}\n \t\t\t},\n\n \t\t\taudio: true\n \t\t}\n\n \t\t//if a user is using a mobile browser \n \t\tif(/Android|iPhone|iPad/i.test(navigator.userAgent)) {\n \t\t\tvar constraints = mobileConstraints;\n \t\t} else {\n \t\t\tvar constraints = desktopConstraints;\n \t\t}\n \t\tvar remoteStream;\n\n \t\tfunction trace(txt) {\n \t\t\tvar elem = document.getElementById("debug");\n \t\t\telem.innerHTML += txt + "<br>";\n \t\t}\n\n \t\tfunction sendToPeer(peer_id, data) {\n \t\t\tif(my_id == -1) {\n \t\t\t\talert("Not connected");\n \t\t\t\treturn;\n \t\t\t}\n \t\t\tif(peer_id == my_id) {\n \t\t\t\talert("Can\'t send a message to oneself :)");\n \t\t\t\treturn;\n \t\t\t}\n \t\t\tvar r = new XMLHttpRequest();\n \t\t\tr.open("POST", server + "/message?peer_id=" + my_id + "&to=" + peer_id,\n \t\t\t\tfalse);\n \t\t\tr.setRequestHeader("Content-Type", "text/plain");\n \t\t\tr.send(data);\n \t\t\tconsole.log(peer_id, " Send ", data);\n \t\t\ttrace(peer_id + " Send :" + data);\n \t\t\tvar dataJson = JSON.parse(data);\n \t\t\tconsole.log(peer_id, " send ", data);\n \t\t\tr = null;\n \t\t}\n \t\tvar onSessionConnecting = function(message) {\n\n \t\t\tconsole.log("Session connecting.");\n \t\t\ttrace("Session connecting.");\n \t\t}\n\n \t\tvar onSessionOpened = function(message) {\n \t\t\tconsole.log("Session opened.");\n \t\t\ttrace("Session opened.");\n \t\t}\n\n \t\tvar onRemoteStreamRemoved = function(event) {\n \t\t\t\tconsole.log("Remote stream removed.");\n \t\t\t\ttrace("Remote stream removed.");\n \t\t\t}\n \t\t\t//This function \n \t\tvar createPeerConnection = function(connectionId) {\n \t\t\tvar pc_config = {\n \t\t\t\t"iceServers": [{\n \t\t\t\t\t"url": "stun:stun.l.google.com:19302"\n \t\t\t\t}]\n \t\t\t};\n \t\t\ttry {\n \t\t\t\tconsole.log(pc_config);\n \t\t\t\ttrace(pc_config);\n \t\t\t\t// 创建PeerConnection实例 (参数为null则没有iceserver，即使没有stunserver和turnserver，仍可在局域网下通讯)\n \t\t\t\tpc = new RTCPeerConnection(pc_config);\n \t\t\t\t// 发送ICE候选到其他客户端\n \t\t\t\tpc.onicecandidate = function(event) {\n \t\t\t\t\tif(event.candidate) {\n \t\t\t\t\t\tvar msgCANDIDATE = {};\n \t\t\t\t\t\tmsgCANDIDATE.sdpMLineIndex = event.candidate.sdpMLineIndex;\n \t\t\t\t\t\tmsgCANDIDATE.sdpMid = event.candidate.sdpMid;\n \t\t\t\t\t\tmsgCANDIDATE.candidate = event.candidate.candidate;\n \t\t\t\t\t\tsendToPeer(connectionId, JSON.stringify(msgCANDIDATE));\n \t\t\t\t\t} else {\n \t\t\t\t\t\tconsole.log("End of candidates.");\n \t\t\t\t\t\ttrace("End of candidates.");\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tpc.onconnecting = onSessionConnecting;\n \t\t\t\tpc.onopen = onSessionOpened;\n \t\t\t\t// 如果检测到媒体流连接到本地，将其绑定到一个video标签上输出\n \t\t\t\tpc.onaddstream = function(event) {\n \t\t\t\t\tconsole.log("Remote stream added.");\n \t\t\t\t\ttrace("Remote stream added.");\n \t\t\t\t\tdocument.getElementById(\'remoteVideo\').src = URL.createObjectURL(event.stream);\n \t\t\t\t}\n \t\t\t\tpc.onremovestream = onRemoteStreamRemoved;\n \t\t\t\tconsole.log("Created RTCPeerConnnection with config \\"" + JSON.stringify(pc_config) + "\\". for ");\n \t\t\t\ttrace("Created RTCPeerConnnection with config \\"" + JSON.stringify(pc_config) + "\\". for ");\n \t\t\t\t//setLocalStream(connectionId);//解除注释将可以双端通信 不过延迟就高了\n \t\t\t} catch(e) {\n \t\t\t\tconsole.log("Failed to create PeerConnection with " + connectionId + ", exception: " + e.message);\n \t\t\t\ttrace("Failed to create PeerConnection with " + connectionId + ", exception: " + e.message);\n \t\t\t}\n\n \t\t}\n\n \t\tfunction setLocalStream(connectionId) {\n \t\t\t// 获取本地音频和视频流\n \t\t\tnavigator.getUserMedia(constraints, function(stream) {\n \t\t\t\t//绑定本地媒体流到video标签用于输出\n \t\t\t\tdocument.getElementById(\'localVideo\').src = URL.createObjectURL(stream);\n \t\t\t\t//向PeerConnection中加入需要发送的流\n \t\t\t\tpc.addStream(stream);\n \t\t\t\t//如果是发起方则发送一个offer信令\n \t\t\t\tpc.createOffer(function sendOfferFn(desc) {\n \t\t\t\t\tpc.setLocalDescription(desc);\n \t\t\t\t\tvar data = JSON.stringify(desc);\n \t\t\t\t\tsendToPeer(connectionId, data);\n \t\t\t\t}, function(error) {\n \t\t\t\t\tconsole.log(\'Failure callback: \' + error);\n \t\t\t\t\ttrace(\'Failure callback: \' + error);\n \t\t\t\t});\n \t\t\t}, function(error) {\n \t\t\t\t//处理媒体流创建失败错误\n \t\t\t\tconsole.log(\'getUserMedia error: \' + error);\n \t\t\t\ttrace(\'getUserMedia error: \' + error);\n \t\t\t});\n\n \t\t}\n \t\t//添加新加入的peer到本地\n \t\tfunction handleServerNotification(data) {\n \t\t\tconsole.log("Server notification: " + data);\n \t\t\ttrace("Server notification: " + data);\n \t\t\tvar parsed = data.split(\',\');\n \t\t\tif(parseInt(parsed[2]) != 0)\n \t\t\t\tother_peers[parseInt(parsed[1])] = parsed[0];\n \t\t}\n \t\t//如果是一个ICE的候选，则将其加入到PeerConnection中，否则设定对方的session描述为传递过来的描述\n \t\tfunction handlePeerMessage(peer_id, data) {\n \t\t\tvar dataJson = JSON.parse(data);\n \t\t\tif(data.search("offer") != -1) {\n \t\t\t\t//json:{"sdp":xxx,type:"offer"}\n \t\t\t\tcreatePeerConnection(peer_id);\n \t\t\t\tpc.setRemoteDescription(new RTCSessionDescription(dataJson));\n \t\t\t\tpc.createAnswer(function(sessionDescription) {\n \t\t\t\t\tvar answerData = JSON.stringify(sessionDescription);\n \t\t\t\t\tconsole.log("answer:" + answerData);\n \t\t\t\t\ttrace("answer:" + answerData);\n \t\t\t\t\tpc.setLocalDescription(sessionDescription);\n \t\t\t\t\tsendToPeer(peer_id, answerData);\n \t\t\t\t}, function(error) {\n \t\t\t\t\tconsole.log(\'Failure callback: \' + error);\n \t\t\t\t\ttrace(\'Failure callback: \' + error);\n \t\t\t\t});\n \t\t\t} else {\n \t\t\t\t//It is a candidate\n \t\t\t\tvar candidate = new RTCIceCandidate({\n \t\t\t\t\tsdpMLineIndex: dataJson.sdpMLineIndex,\n \t\t\t\t\tcandidate: dataJson.candidate\n \t\t\t\t});\n \t\t\t\tpc.addIceCandidate(candidate);\n \t\t\t}\n \t\t}\n\n \t\tfunction GetIntHeader(r, name) {\n \t\t\tvar val = r.getResponseHeader(name);\n \t\t\treturn val != null && val.length ? parseInt(val) : -1;\n \t\t}\n \t\t//等待服务器返回，当出现以下情况或超时才会返回 \n \t\t//1.其他peer连接上server会返回peer的数据{peerName,peerID,xx};用于本地添加\n \t\t//本地响应handleServerNotification\n \t\t//2.其他peer点击my_name(即发送 发送-接收视频 请求)，返回 一个ice的候选或者offer\n \t\t//\t{\n \t\t// "candidate" : "candidate:1918330882 1 udp 2122260223 192.168.253.1 55710 typ host generation 0 ufrag YUtt network-id 4 network-cost 50",\n \t\t// "sdpMLineIndex" : 0,\n \t\t// "sdpMid" : "audio"\n \t\t//} this is ice\n \t\t//本地响应handlePeerMessage\n \t\tfunction hangingGetCallback() {\n \t\t\ttry {\n \t\t\t\tif(hangingGet.readyState != 4)\n \t\t\t\t\treturn; //why?\n \t\t\t\tif(hangingGet.status != 200) {\n \t\t\t\t\tconsole.log("server error: " + hangingGet.statusText);\n \t\t\t\t\ttrace("server error: " + hangingGet.statusText);\n \t\t\t\t\tdisconnect();\n \t\t\t\t} else {\n \t\t\t\t\tvar peer_id = GetIntHeader(hangingGet, "Pragma");\n\n \t\t\t\t\tif(peer_id == my_id) {\n \t\t\t\t\t\tconsole.log("handleServerNotification:" + hangingGet.responseText);\n \t\t\t\t\t\ttrace("handleServerNotification:" + hangingGet.responseText);\n \t\t\t\t\t\thandleServerNotification(hangingGet.responseText);\n \t\t\t\t\t} else {\n \t\t\t\t\t\tconsole.log("handlePeerMessage:" + hangingGet.responseText);\n \t\t\t\t\t\ttrace("handlePeerMessage:" + hangingGet.responseText);\n \t\t\t\t\t\thandlePeerMessage(peer_id, hangingGet.responseText);\n \t\t\t\t\t}\n \t\t\t\t}\n\n \t\t\t\tif(hangingGet) {\n \t\t\t\t\thangingGet.abort();\n \t\t\t\t\thangingGet = null;\n \t\t\t\t}\n\n \t\t\t\tif(my_id != -1)\n \t\t\t\t\twindow.setTimeout(startHangingGet, 0);\n \t\t\t} catch(e) {\n \t\t\t\tconsole.log("Hanging get error: " + e.description);\n \t\t\t\ttrace("Hanging get error: " + e.description);\n \t\t\t}\n \t\t}\n \t\t//继续把my_id发给server 当其他peer连接服务器的时候其他peer就可以获取my_id\n \t\tfunction startHangingGet() {\n \t\t\ttry {\n \t\t\t\thangingGet = new XMLHttpRequest();\n \t\t\t\thangingGet.onreadystatechange = hangingGetCallback;\n \t\t\t\thangingGet.ontimeout = onHangingGetTimeout;\n \t\t\t\thangingGet.open("GET", server + "/wait?peer_id=" + my_id, true);\n \t\t\t\thangingGet.send();\n \t\t\t} catch(e) {\n \t\t\t\tconsole.log("error" + e.description);\n \t\t\t\ttrace("error" + e.description);\n \t\t\t}\n \t\t}\n \t\t//如果超时则继续发送startHangingGet请求\n \t\tfunction onHangingGetTimeout() {\n \t\t\tconsole.log("hanging get timeout. issuing again.");\n \t\t\ttrace("hanging get timeout. issuing again.");\n \t\t\thangingGet.abort();\n \t\t\thangingGet = null;\n \t\t\tif(my_id != -1)\n \t\t\t\twindow.setTimeout(startHangingGet, 0);\n \t\t}\n \t\t//server返回my_id(服务器已递增的方式生成id)和远端peer的id\n \t\t//那如果browser先连接，没有其他peer，该方法返回时没有远端peer的id 后面是哪里获取的呢？\n \t\t//所以它又做了一个startHangingGet();\n \t\t//通过handleServerNotification 得到,log:Server notification: zhengjx@X-CDN-zhengjx,2,1\n \t\tfunction signInCallback() {\n \t\t\ttry {\n \t\t\t\tconsole.log("request.readyState:" + request.readyState);\n \t\t\t\ttrace("request.readyState:" + request.readyState);\n \t\t\t\tif(request.readyState == 4) {\n \t\t\t\t\tif(request.status == 200) {\n \t\t\t\t\t\tvar peers = request.responseText.split("\\n");\n \t\t\t\t\t\tmy_id = parseInt(peers[0].split(\',\')[1]);\n \t\t\t\t\t\tconsole.log("My id: " + my_id); //My id 1\n \t\t\t\t\t\ttrace("My id: " + my_id); //My id 1\n \t\t\t\t\t\t//Peer 1: zhengjx@X-CDN-zhengjx,2,parsed[2]没用到 \n \t\t\t\t\t\tfor(var i = 1; i < peers.length; ++i) {\n \t\t\t\t\t\t\tif(peers[i].length > 0) {\n \t\t\t\t\t\t\t\tconsole.log("Peer " + i + ": " + peers[i]);\n \t\t\t\t\t\t\t\ttrace("Peer " + i + ": " + peers[i]);\n \t\t\t\t\t\t\t\tvar parsed = peers[i].split(\',\');\n \t\t\t\t\t\t\t\tother_peers[parseInt(parsed[1])] = parsed[0];\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t\tstartHangingGet();\n \t\t\t\t\t\trequest = null;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} catch(e) {\n \t\t\t\tconsole.log("error: " + e.description);\n \t\t\t\ttrace("error: " + e.description);\n \t\t\t}\n \t\t}\n \t\t//注册，把自己的localName发给server\n \t\tfunction signIn() {\n \t\t\ttry {\n \t\t\t\trequest = new XMLHttpRequest();\n \t\t\t\trequest.onreadystatechange = signInCallback;\n \t\t\t\trequest.open("GET", server + "/sign_in?" + localName, true);\n \t\t\t\trequest.send();\n \t\t\t} catch(e) {\n \t\t\t\tconsole.log("error: " + e.description);\n \t\t\t\ttrace("error: " + e.description);\n \t\t\t}\n \t\t}\n\n \t\tfunction connect() {\n \t\t\tlocalName = document.getElementById("local").value.toLowerCase();\n \t\t\tserver = document.getElementById("server").value.toLowerCase();\n \t\t\tif(localName.length == 0) {\n \t\t\t\talert("I need a name please.");\n \t\t\t\tdocument.getElementById("local").focus();\n \t\t\t} else {\n \t\t\t\tdocument.getElementById("connect").disabled = true;\n \t\t\t\tdocument.getElementById("disconnect").disabled = false;\n \t\t\t\t//document.getElementById("send").disabled = false;\n \t\t\t\tsignIn();\n \t\t\t}\n \t\t}\n\n \t\tfunction disconnect() {\n \t\t\tif(request) {\n \t\t\t\trequest.abort();\n \t\t\t\trequest = null;\n \t\t\t}\n\n \t\t\tif(hangingGet) {\n \t\t\t\thangingGet.abort();\n \t\t\t\thangingGet = null;\n \t\t\t}\n\n \t\t\tif(my_id != -1) {\n \t\t\t\trequest = new XMLHttpRequest();\n \t\t\t\trequest.open("GET", server + "/sign_out?peer_id=" + my_id, false);\n \t\t\t\trequest.send();\n \t\t\t\trequest = null;\n \t\t\t\tmy_id = -1;\n \t\t\t}\n\n \t\t\tdocument.getElementById("connect").disabled = false;\n \t\t\tdocument.getElementById("disconnect").disabled = true;\n \t\t\t//document.getElementById("send").disabled = true;\n \t\t}\n \t<\/script>\n </head>\n\n <body>\n \tLocal: <br>\n \t<video id="localVideo" autoplay></video><br> Remote: <br>\n \t<video id="remoteVideo" autoplay style="width:400px;height:300px;"></video>\n\n \tServer: <input type="text" id="server" value="http://172.27.35.1:8888" /><br> Your name: <input type="text" id="local" value="my_name" />\n \t<button id="connect" onclick="connect();">Connect</button>\n \t<button disabled="true" id="disconnect" onclick="disconnect();">Disconnect</button>\n \t<pre id="debug">\n \t</pre>\n </body>\n')])])])])])]),t._v(" "),e("p",[t._v("将WebrtcTEST项目放入HTTP服务器\n访问 http://localhost/WebrtcTEST/test.html")]),t._v(" "),e("h1",{attrs:{id:"服务器端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务器端"}},[t._v("#")]),t._v(" 服务器端")]),t._v(" "),e("p",[t._v("下载百度云的那个rar并解压得到\n"),e("code",[t._v("peerconnection_client.exe")]),t._v(" 和 "),e("code",[t._v("peerconnection_server.exe")]),t._v(" "),e("code",[t._v("peerconnection_client.exe")]),t._v("的网络运行环境任意，可局域网可公网。\n但"),e("code",[t._v("peerconnection_server.exe")]),t._v("网络运行环境必须保证能让"),e("code",[t._v("peerconnection_client")]),t._v("和"),e("code",[t._v("Web端localhost")]),t._v("所在网络运行环境访问到。\n也就是说，"),e("strong",[t._v("要么"),e("code",[t._v("peerconnection_server")]),t._v("处于公网，要么三者均处于局域网。")])]),t._v(" "),e("blockquote",[e("p",[t._v("PS:测试时为了方便选择局域网，并让peerconnection_client和peerconnection_server处于同一台PC")])]),t._v(" "),e("h2",{attrs:{id:"测试流程如下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试流程如下"}},[t._v("#")]),t._v(" 测试流程如下：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("服务器端运行"),e("code",[t._v("peerconnection_server")])])]),t._v(" "),e("li",[e("p",[t._v("服务器端运行"),e("code",[t._v("peerconnection_client")]),t._v("，并直接点击"),e("code",[t._v("connect")])])]),t._v(" "),e("li",[e("p",[t._v("另一Client的Web端设置"),e("code",[t._v("Server IP")]),t._v("地址和"),e("code",[t._v("Your name")]),t._v("【name随意】,点击"),e("code",[t._v("connect")])])]),t._v(" "),e("li",[e("p",[t._v("服务器端peerconnection_client显示Web端连接上了，列表上出现name，对其进行点击;")])]),t._v(" "),e("li",[e("p",[t._v("现在就可以在Web端看到服务器端摄像头的画面了，延迟小于200ms.")])]),t._v(" "),e("li",[e("p",[t._v("如果想让服务器端看到Web端用户摄像头画面，将test.html的第132行注释去掉")]),t._v(" "),e("p",[t._v("//setLocalStream(connectionId);//解除注释将可以双端通信 不过延迟就高了")])])]),t._v(" "),e("h1",{attrs:{id:"js具体流程分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js具体流程分析"}},[t._v("#")]),t._v(" JS具体流程分析")]),t._v(" "),e("h2",{attrs:{id:"从function-connect-开始分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从function-connect-开始分析"}},[t._v("#")]),t._v(" 从"),e("code",[t._v("function connect()")]),t._v(" 开始分析")]),t._v(" "),e("h2",{attrs:{id:"调用signin-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调用signin-函数"}},[t._v("#")]),t._v(" 调用signIn()函数")]),t._v(" "),e("p",[t._v("将自己的localName【填写的Your name】发给server,响应结束将调用signInCallback")]),t._v(" "),e("h2",{attrs:{id:"分析signincallback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分析signincallback"}},[t._v("#")]),t._v(" 分析signInCallback()")]),t._v(" "),e("p",[t._v("server返回my_id(服务器已递增的方式生成id)和远端peer的id\n"),e("strong",[t._v("那如果browser先连接，没有其他peer，该方法返回时没有远端peer的id 后面是哪里获取的呢？")]),t._v("\n所以它又做了一个startHangingGet();\n返回的peer数据格式：peer_name,peer_id,第三个参数没有用到我也不知道是什么。")]),t._v(" "),e("h2",{attrs:{id:"执行starthangingget"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行starthangingget"}},[t._v("#")]),t._v(" 执行startHangingGet();")]),t._v(" "),e("p",[t._v("不管上一步有没有获取到peer该步骤都会进行的。")]),t._v(" "),e("h4",{attrs:{id:"该步骤是把my-id发送给server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#该步骤是把my-id发送给server"}},[t._v("#")]),t._v(" 该步骤是把my_id发送给server.")]),t._v(" "),e("p",[t._v("当其他peer进行操作**[1.连接服务器的时候其他peer就可以获取my_id;2.发送播流指令]**XHR请求将成功响应,并且自己将执行hangingGetCallback。\n如果请求超时的话将回调onHangingGetTimeout，其结果是重新执行startHangingGet")]),t._v(" "),e("h2",{attrs:{id:"执行hanginggetcallback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行hanginggetcallback"}},[t._v("#")]),t._v(" 执行hangingGetCallback")]),t._v(" "),e("p",[t._v("正如刚刚说的，有两种情况，服务器将响应返回")]),t._v(" "),e("h3",{attrs:{id:"_1-其他peer连接上server会返回peer的数据-peername-peerid-xx-用于本地添加"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-其他peer连接上server会返回peer的数据-peername-peerid-xx-用于本地添加"}},[t._v("#")]),t._v(" 1.其他peer连接上server会返回peer的数据{peerName,peerID,xx};用于本地添加")]),t._v(" "),e("p",[t._v("本地响应"),e("code",[t._v("handleServerNotification")]),t._v("\nlog打印：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("handleServerNotification:zhengjx@X-CDN-zhengjx,4,1\nServer notification: zhengjx@X-CDN-zhengjx,4,1\n")])])]),e("h3",{attrs:{id:"_2-其他peer点击my-name-即发送-播流-请求-返回-一个ice的候选或者offer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-其他peer点击my-name-即发送-播流-请求-返回-一个ice的候选或者offer"}},[t._v("#")]),t._v(" 2.其他peer点击my_name(即发送 播流 请求)，返回 一个ice的候选或者offer")]),t._v(" "),e("p",[t._v("本地响应"),e("code",[t._v("handlePeerMessage")])]),t._v(" "),e("h2",{attrs:{id:"这里我们直接分析peer发送播流请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这里我们直接分析peer发送播流请求"}},[t._v("#")]),t._v(" 这里我们直接分析peer发送播流请求")]),t._v(" "),e("h3",{attrs:{id:"远端peer先发送了一个携带音视频信息sdp的offer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远端peer先发送了一个携带音视频信息sdp的offer"}},[t._v("#")]),t._v(" 远端peer先发送了一个携带音视频信息sdp的offer")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('handlePeerMessage:{\n   "sdp" : "v=0\\r\\no=- 1915807044938492152 2 IN IP4 127.0.0.1\\r\\ns=-\\r\\nt=0 0\\r\\na=group:BUNDLE audio video\\r\\na=msid-semantic: WMS stream_label\\r\\nm=audio 9 UDP/TLS/RTP/SAVPF 111 103 104 9 102 0 8 106 105 13 127 126\\r\\nc=IN IP4 0.0.0.0\\r\\na=rtcp:9 IN IP4 0.0.0.0\\r\\na=ice-ufrag:s+rj\\r\\na=ice-pwd:JZspr0P/+RWnF3WFF7H2njf+\\r\\na=fingerprint:sha-256 DC:1B:45:26:86:B0:51:E1:2C:84:F6:04:83:1F:13:87:5F:54:9D:9F:4C:8D:04:33:E3:2F:69:BC:69:23:51:D5\\r\\na=setup:actpass\\r\\na=mid:audio\\r\\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level\\r\\na=extmap:3 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\\r\\na=sendrecv\\r\\na=rtcp-mux\\r\\na=rtpmap:111 opus/48000/2\\r\\na=rtcp-fb:111 transport-cc\\r\\na=fmtp:111 minptime=10;useinbandfec=1\\r\\na=rtpmap:103 ISAC/16000\\r\\na=rtpmap:104 ISAC/32000\\r\\na=rtpmap:9 G722/8000\\r\\na=rtpmap:102 ILBC/8000\\r\\na=rtpmap:0 PCMU/8000\\r\\na=rtpmap:8 PCMA/8000\\r\\na=rtpmap:106 CN/32000\\r\\na=rtpmap:105 CN/16000\\r\\na=rtpmap:13 CN/8000\\r\\na=rtpmap:127 red/8000\\r\\na=rtpmap:126 telephone-event/8000\\r\\na=ssrc:1946889360 cname:oeS68Tdb4Ls6Qz2u\\r\\na=ssrc:1946889360 msid:stream_label audio_label\\r\\na=ssrc:1946889360 mslabel:stream_label\\r\\na=ssrc:1946889360 label:audio_label\\r\\nm=video 9 UDP/TLS/RTP/SAVPF 100 101 116 117 96 97 98\\r\\nc=IN IP4 0.0.0.0\\r\\na=rtcp:9 IN IP4 0.0.0.0\\r\\na=ice-ufrag:s+rj\\r\\na=ice-pwd:JZspr0P/+RWnF3WFF7H2njf+\\r\\na=fingerprint:sha-256 DC:1B:45:26:86:B0:51:E1:2C:84:F6:04:83:1F:13:87:5F:54:9D:9F:4C:8D:04:33:E3:2F:69:BC:69:23:51:D5\\r\\na=setup:actpass\\r\\na=mid:video\\r\\na=extmap:2 urn:ietf:params:rtp-hdrext:toffset\\r\\na=extmap:3 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\\r\\na=extmap:4 urn:3gpp:video-orientation\\r\\na=sendrecv\\r\\na=rtcp-mux\\r\\na=rtcp-rsize\\r\\na=rtpmap:100 VP8/90000\\r\\na=rtcp-fb:100 ccm fir\\r\\na=rtcp-fb:100 nack\\r\\na=rtcp-fb:100 nack pli\\r\\na=rtcp-fb:100 goog-remb\\r\\na=rtcp-fb:100 transport-cc\\r\\na=rtpmap:101 VP9/90000\\r\\na=rtcp-fb:101 ccm fir\\r\\na=rtcp-fb:101 nack\\r\\na=rtcp-fb:101 nack pli\\r\\na=rtcp-fb:101 goog-remb\\r\\na=rtcp-fb:101 transport-cc\\r\\na=rtpmap:116 red/90000\\r\\na=rtpmap:117 ulpfec/90000\\r\\na=rtpmap:96 rtx/90000\\r\\na=fmtp:96 apt=100\\r\\na=rtpmap:97 rtx/90000\\r\\na=fmtp:97 apt=101\\r\\na=rtpmap:98 rtx/90000\\r\\na=fmtp:98 apt=116\\r\\na=ssrc-group:FID 1010645505 1298682012\\r\\na=ssrc:1010645505 cname:oeS68Tdb4Ls6Qz2u\\r\\na=ssrc:1010645505 msid:stream_label video_label\\r\\na=ssrc:1010645505 mslabel:stream_label\\r\\na=ssrc:1010645505 label:video_label\\r\\na=ssrc:1298682012 cname:oeS68Tdb4Ls6Qz2u\\r\\na=ssrc:1298682012 msid:stream_label video_label\\r\\na=ssrc:1298682012 mslabel:stream_label\\r\\na=ssrc:1298682012 label:video_label\\r\\n",\n   "type" : "offer"\n}\n')])])]),e("h3",{attrs:{id:"createpeerconnection-设定对方的sdp为传递过来的描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#createpeerconnection-设定对方的sdp为传递过来的描述"}},[t._v("#")]),t._v(" createPeerConnection，设定对方的sdp为传递过来的描述")]),t._v(" "),e("p",[t._v("执行")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("createPeerConnection(peer_id);\npc.setRemoteDescription(new RTCSessionDescription(dataJson));\t\t\t\t                    pc.createAnswer(function(sessionDescription)  {\n\t\tvar answerData = JSON.stringify(sessionDescription);\n\t\tconsole.log(\"answer:\" + answerData);\n\t\ttrace(\"answer:\" + answerData);\n\t    pc.setLocalDescription(sessionDescription);\n\t\tsendToPeer(peer_id, answerData);\n\t\t\t\t\t}, function(error) {\n\t\t\t\t\t\tconsole.log('Failure callback: ' + error);\n\t\t\t\t\t\ttrace('Failure callback: ' + error);\n\t\t\t\t\t});\n")])])]),e("p",[t._v("创建PeerConnection实例 (参数为null则没有iceserver，即使没有stunserver和turnserver，仍可在局域网下通讯)\n这里我们设置了"),e("code",[t._v("onicecandidate")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('{"iceServers":[{"url":"stun:stun.l.google.com:19302"}]}\n')])])]),e("p",[t._v("通过执行sendToPeer函数发送ICE候选到其他客户端，该过程会慢于RTCPeerConnection.onaddstream。")]),t._v(" "),e("p",[t._v("当上面做的pc.setRemoteDescription成功执行时，pc.onaddstream将调用。\n官网原话:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("RTCPeerConnection.onaddstream：\nThe event is sent immediately after the call RTCPeerConnection.setRemoteDescription() \n")])])]),e("p",[t._v("回复的answer sdp 如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('answer:{"type":"answer","sdp":"v=0\\r\\no=- 681837714082552550 2 IN IP4 127.0.0.1\\r\\ns=-\\r\\nt=0 0\\r\\na=group:BUNDLE audio video\\r\\na=msid-semantic: WMS\\r\\nm=audio 9 UDP/TLS/RTP/SAVPF 111 103 104 9 0 8 106 105 13 126\\r\\nc=IN IP4 0.0.0.0\\r\\na=rtcp:9 IN IP4 0.0.0.0\\r\\na=ice-ufrag:XNSrC9DEJco2wMEV\\r\\na=ice-pwd:PhP5CUsS6P8wxnCZZa5aZ5nD\\r\\na=fingerprint:sha-256 F8:93:41:5C:50:E9:EF:11:66:0F:2F:64:F7:CE:C4:BB:C5:57:D8:3C:C3:04:19:27:33:B7:93:DE:58:9F:DF:74\\r\\na=setup:active\\r\\na=mid:audio\\r\\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level\\r\\na=extmap:3 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\\r\\na=recvonly\\r\\na=rtcp-mux\\r\\na=rtpmap:111 opus/48000/2\\r\\na=rtcp-fb:111 transport-cc\\r\\na=fmtp:111 minptime=10;useinbandfec=1\\r\\na=rtpmap:103 ISAC/16000\\r\\na=rtpmap:104 ISAC/32000\\r\\na=rtpmap:9 G722/8000\\r\\na=rtpmap:0 PCMU/8000\\r\\na=rtpmap:8 PCMA/8000\\r\\na=rtpmap:106 CN/32000\\r\\na=rtpmap:105 CN/16000\\r\\na=rtpmap:13 CN/8000\\r\\na=rtpmap:126 telephone-event/8000\\r\\na=maxptime:60\\r\\nm=video 9 UDP/TLS/RTP/SAVPF 100 101 116 117 96 97 98\\r\\nc=IN IP4 0.0.0.0\\r\\na=rtcp:9 IN IP4 0.0.0.0\\r\\na=ice-ufrag:XNSrC9DEJco2wMEV\\r\\na=ice-pwd:PhP5CUsS6P8wxnCZZa5aZ5nD\\r\\na=fingerprint:sha-256 F8:93:41:5C:50:E9:EF:11:66:0F:2F:64:F7:CE:C4:BB:C5:57:D8:3C:C3:04:19:27:33:B7:93:DE:58:9F:DF:74\\r\\na=setup:active\\r\\na=mid:video\\r\\na=extmap:2 urn:ietf:params:rtp-hdrext:toffset\\r\\na=extmap:3 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\\r\\na=extmap:4 urn:3gpp:video-orientation\\r\\na=recvonly\\r\\na=rtcp-mux\\r\\na=rtcp-rsize\\r\\na=rtpmap:100 VP8/90000\\r\\na=rtcp-fb:100 ccm fir\\r\\na=rtcp-fb:100 nack\\r\\na=rtcp-fb:100 nack pli\\r\\na=rtcp-fb:100 goog-remb\\r\\na=rtcp-fb:100 transport-cc\\r\\na=rtpmap:101 VP9/90000\\r\\na=rtcp-fb:101 ccm fir\\r\\na=rtcp-fb:101 nack\\r\\na=rtcp-fb:101 nack pli\\r\\na=rtcp-fb:101 goog-remb\\r\\na=rtcp-fb:101 transport-cc\\r\\na=rtpmap:116 red/90000\\r\\na=rtpmap:117 ulpfec/90000\\r\\na=rtpmap:96 rtx/90000\\r\\na=fmtp:96 apt=100\\r\\na=rtpmap:97 rtx/90000\\r\\na=fmtp:97 apt=101\\r\\na=rtpmap:98 rtx/90000\\r\\na=fmtp:98 apt=116\\r\\n"}\n')])])]),e("h3",{attrs:{id:"接下来的过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接下来的过程"}},[t._v("#")]),t._v(" 接下来的过程")]),t._v(" "),e("p",[t._v("上一步提到的，本地发送ICE候选到其他客户端")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('" Send " "{"sdpMLineIndex":0,"sdpMid":"audio","candidate":"candidate:3604340130 1 udp 2122260223 192.168.216.1 50938 typ host generation 0 ufrag XNSrC9DEJco2wMEV network-id 4"}"\n')])])]),e("p",[t._v("该过程会执行多次，每次携带的candidate都不一致，直到打印"),e("code",[t._v('console.log("End of candidates.");')]),t._v("\n与此同时，本地通过handlePeerMessage获取到ICE的候选，并将其加入到PeerConnection中。\n这样两端就都有各自的ICE候选了，那么就可以进行通信。")]),t._v(" "),e("p",[t._v("pc.onaddstream在前一步调用，那么接下来peer就应该开始传流。\n本地通过handlePeerMessage获取的音视频数据部分如下")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('handlePeerMessage:{\n   "candidate" : "candidate:2013099291 2 udp 2122194686 10.8.146.177 54148 typ host generation 0 ufrag s+rj network-id 3 network-cost 50",\n   "sdpMLineIndex" : 0,\n   "sdpMid" : "audio"\n}\n\nVM122 phone_frame.html:450 handlePeerMessage:{\n   "candidate" : "candidate:2719042630 1 udp 2122260223 172.27.35.1 54149 typ host generation 0 ufrag s+rj network-id 4 network-cost 50",\n   "sdpMLineIndex" : 1,\n   "sdpMid" : "video"\n}\n')])])]),e("p",[e("strong",[t._v("[注意之间建立了的candidate会在传输时用到，所以可以理解candidate是一种管道，我们创建了多个candidate就是多个管道，视音频数据就是通过这些管道来传输]")]),t._v("\n当然，再具体的原理就不探讨了，涉及穿透等高深的知识= =。")]),t._v(" "),e("p",[t._v("由于研究未深，如有错误，烦请指正，谢谢。")])])}),[],!1,null,null,null);e.default=a.exports}}]);