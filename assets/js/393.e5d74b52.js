(window.webpackJsonp=window.webpackJsonp||[]).push([[393],{1286:function(n,e,t){"use strict";t.r(e);var _=t(30),a=Object(_.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"第一章-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一章-简介"}},[n._v("#")]),n._v(" 第一章 简介")]),n._v(" "),e("h2",{attrs:{id:"内存分配3种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存分配3种方式"}},[n._v("#")]),n._v(" 内存分配3种方式")]),n._v(" "),e("h3",{attrs:{id:"静态分配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态分配"}},[n._v("#")]),n._v(" 静态分配：")]),n._v(" "),e("blockquote",[e("p",[e("strong",[n._v("局限")]),n._v("\n每个数据结构的大小必须在编译时可知\n过程不能递归，因为对于过程的每个活动("),e("em",[n._v("过程体的一次执行")]),n._v(")，局部名字在内存中共享相同位置("),e("em",[n._v("这时一般用的是栈分配")]),n._v(")\n无法动态创建数据结构\n"),e("strong",[n._v("优点")]),n._v("\n效率高，不需要在程序执行时创建和销毁栈帧\n编译器知道所有数据的内存位置，可直接访问存储位置\n内存需求预知，不会发生OOM")])]),n._v(" "),e("h3",{attrs:{id:"栈分配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈分配"}},[n._v("#")]),n._v(" 栈分配：")]),n._v(" "),e("blockquote",[e("p",[e("strong",[n._v("特点")]),n._v("\n可递归调用\n栈分配的局部值，无法从过程体的一次执行保存到过程体的下一次执行("),e("em",[n._v("这时一般用的是静态分配")]),n._v(")\n被调用者的生命周期<=它的调用者\n只有大小能在编译时确定的对象，才能作为过程的结果返回")])]),n._v(" "),e("h3",{attrs:{id:"堆分配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆分配"}},[n._v("#")]),n._v(" 堆分配")]),n._v(" "),e("blockquote",[e("p",[n._v("动态大小的对象可作为过程结果返回\n数据结构大小不固定\n允许把一个过程作为另一个过程的结果返回")])]),n._v(" "),e("h2",{attrs:{id:"显式堆分配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#显式堆分配"}},[n._v("#")]),n._v(" 显式堆分配")]),n._v(" "),e("p",[n._v("即分配和释放堆对象交由程序员\n会出现以下的问题")]),n._v(" "),e("blockquote",[e("p",[n._v("假设有这样的"),e("code",[n._v("链表mList=[head|next]->[1|next]->[2|/]")])])]),n._v(" "),e("h3",{attrs:{id:"垃圾"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾"}},[n._v("#")]),n._v(" 垃圾")]),n._v(" "),e("p",[n._v("创建链表后加上 "),e("code",[n._v("head.next=null")]),n._v(" 造成内存泄漏")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("mList=[head|/]     [1|next]->[2|/]`\n")])])]),e("p",[n._v("导致只有链表第一个元素可以访问，2 3项不能访问和使用\n"),e("strong",[n._v("自动内存管理就是为了解决恢复不可访问的内存")])]),n._v(" "),e("h3",{attrs:{id:"悬挂引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#悬挂引用"}},[n._v("#")]),n._v(" 悬挂引用")]),n._v(" "),e("p",[n._v("假设"),e("code",[n._v("dispose(Object o)方法")]),n._v("为释放o的内存\n创建链表后加上 "),e("code",[n._v("dispose(head.next)")]),n._v(" 造成内存泄漏")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("mList=[head|next]-> [...]---\x3e [2|/]`\n")])])]),e("p",[n._v("导致第一项next域指向一个被释放的内存，第三项变成了垃圾\n"),e("strong",[n._v("注意与上文“垃圾”的区别，上面是让head.next为null,"),e("code",[n._v("next已经停止指向堆内存地址")]),n._v("，这边的"),e("code",[n._v("next仍然指向一个堆内存地址")])]),n._v("\n那么程序在运行时如果不小心引用了"),e("strong",[n._v("释放对象")]),n._v("，程序会出错")]),n._v(" "),e("h3",{attrs:{id:"共享"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#共享"}},[n._v("#")]),n._v(" 共享")]),n._v(" "),e("p",[n._v("销毁"),e("code",[n._v("最后一个")]),n._v("(可能出现多个对该对象的引用)对"),e("code",[n._v("释放对象")]),n._v("(最后未释放变成垃圾)的引用 将造成"),e("strong",[n._v("垃圾")]),n._v("\n仍然有引用指向对象时就释放对象 将造成"),e("strong",[n._v("悬挂引用")]),n._v("\n这时有个解决办法是让这两个动作同时发生")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("mList=[head|next]->[1|next]->[2|/]\n倘若要回收[1|next]，[2|/]\n应该递归的调用这两种动作(销毁最后一个引用和释放目标对象)同时发生\n最后的执行效果是：dispose(2),1.next=null,dispose(1),head.next=null\n")])])]),e("p",[n._v("对于单向引用这样是可以的\n然而当出现如下情况")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("[head1|next]->[ 1 |next]->[2|next]\n                ↑\n[head2|next]____↑\n//head1和head2的next都指向了1\n")])])]),e("p",[n._v("现在要回收[1|next]，[2|next] 以刚刚的解决方法，最后将是剩下"),e("code",[n._v("一个元素和一个悬挂引用")]),n._v("(\n例如："),e("code",[n._v("[head1|next] [head2|next]->")])]),n._v(" "),e("h3",{attrs:{id:"失败"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#失败"}},[n._v("#")]),n._v(" 失败")]),n._v(" "),e("p",[n._v("内存泄漏在测试或正常使用时可能处于潜伏状态，一般只有长时间运行才会发现\n失败难以重现")]),n._v(" "),e("h2",{attrs:{id:"为什么需要垃圾收集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要垃圾收集"}},[n._v("#")]),n._v(" 为什么需要垃圾收集")]),n._v(" "),e("h3",{attrs:{id:"创建过程介绍后可能存活-被传递给更多的过程和函数-程序员和编译器无法确定何时安全释放他们"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建过程介绍后可能存活-被传递给更多的过程和函数-程序员和编译器无法确定何时安全释放他们"}},[n._v("#")]),n._v(" 创建过程介绍后可能存活，被传递给更多的过程和函数，程序员和编译器无法确定何时安全释放他们")]),n._v(" "),e("h3",{attrs:{id:"数据对象出栈时是否应该释放"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据对象出栈时是否应该释放"}},[n._v("#")]),n._v(" 数据对象出栈时是否应该释放？")]),n._v(" "),e("blockquote",[e("p",[n._v("静态分配一般答案为否\n若没有其他对该对象的引用("),e("em",[n._v("栈为最后一个引用")]),n._v(")，答案为是\n若这些数据被压入其他栈，答案为也许。")])]),n._v(" "),e("p",[n._v("这使得栈的接口复杂化，降低适用性")]),n._v(" "),e("h3",{attrs:{id:"显示内存管理会破坏软件工程的原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#显示内存管理会破坏软件工程的原则"}},[n._v("#")]),n._v(" 显示内存管理会破坏软件工程的原则")]),n._v(" "),e("h2",{attrs:{id:"垃圾收集的开销"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集的开销"}},[n._v("#")]),n._v(" 垃圾收集的开销")]),n._v(" "),e("p",[n._v("上面讲诉了为什么要进行垃圾收集，其实，如今垃圾收集的开销已经是大大减小了。\n本文主要在于研究各种GC算法")]),n._v(" "),e("h2",{attrs:{id:"gc算法比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gc算法比较"}},[n._v("#")]),n._v(" GC算法比较")]),n._v(" "),e("p",[n._v("难以分析复杂度，故主要考虑以下几点")]),n._v(" "),e("blockquote",[e("p",[n._v("1."),e("strong",[n._v("安全性")]),n._v("：存活数据不能被错误回收\n2."),e("strong",[n._v("全面性")]),n._v("：不能出现无法回收的“垃圾”。如引用计数法的垃圾若出现环形则无法回收\n3."),e("strong",[n._v("回收时间")]),n._v("：渐进式收集器在完成GC时不会挂起用户程序，短暂的中断可能是必要的。支持实时响应，对任意时间段GC耗费时间所占比加以限制，确保用户程序良好的交互性。\n4."),e("strong",[n._v("空间管理")]),n._v("：在堆中分配新数据的开销不亚于GC花费的时间。与 缩并的堆相比，破碎堆分配内存开销更大\n5."),e("strong",[n._v("额外开销")]),n._v("：")]),n._v(" "),e("blockquote",[e("p",[n._v("引用计数每次创建和销毁指针都要更新该单元的引用计数。\n渐进式和分代式执行堆的部分收集，渐进式通常保证在"),e("code",[n._v("一个回收周期中回收该周期开始前产生的垃圾")]),n._v("；分代式"),e("code",[n._v("只收集堆的一个分代")]),n._v("(详情见后文)。\n所谓额外开销即，渐进式要求用户程序报告它"),e("code",[n._v("在收集器运行时对堆数据图连通性所做的改变")]),n._v("，而分代式则要求"),e("code",[n._v("若某个分代(通常为老分代)的单元保存了指向另一个分代的单元的引用，那么用户程序要保存一份记录")]),n._v("\n辅助数据结构：为保证缩并拷贝到新内存空间，节点复制式需要2倍于非搬迁式的地址空间")])])]),n._v(" "),e("blockquote",[e("p",[n._v("6."),e("strong",[n._v("通用性")]),n._v("：不同语言是否适用，不同体系架构编译器是否适用该算法")])]),n._v(" "),e("p",[n._v("许多因素是对立的：")]),n._v(" "),e("blockquote",[e("p",[n._v("交互式程序注重更短的中断时间，\n非交互式注重总体运行时间，\n实时应用要求中断时间和任意时间端收集器占用比例都不得超过一个上限，\n运行在虚存机制的工作站程序，良好的换页是个重要因素\nPC则要求更低的内存开销")])]),n._v(" "),e("p",[n._v("下面我们开始介绍经典算法")]),n._v(" "),e("hr"),n._v(" "),e("h1",{attrs:{id:"第二章-经典算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二章-经典算法"}},[n._v("#")]),n._v(" 第二章 经典算法")]),n._v(" "),e("p",[n._v("本章讨论的只是经典算法，改进将在后面章节提到")]),n._v(" "),e("h2",{attrs:{id:"引用计数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[n._v("#")]),n._v(" 引用计数")]),n._v(" "),e("p",[e("strong",[n._v("手段")]),n._v("：每个单元计算指向它的引用的数量\n"),e("strong",[n._v("特点")]),n._v("：")]),n._v(" "),e("blockquote",[e("p",[n._v("天生渐进式，内存管理的开销分布到整个程序之中\n每个单元都有一个引用域用于存放计数值，可简单判断单元是否正在使用->自由单元的引用计数值为0")])]),n._v(" "),e("p",[e("strong",[n._v("应用")]),n._v("：Adobe Photoshop、OS判断一个文件是否可删除(被其他程序引用)、"),e("code",[n._v("早期")]),n._v("程序语言")]),n._v(" "),e("p",[e("strong",[n._v("算法略解")]),n._v("：")]),n._v(" "),e("blockquote",[e("p",[n._v("所有单元被放入一个自由单元池，用RC(R)记录R的被引用值\nRC(自由单元)=0，RC(新分配单元)=1，删除指向单元的引用RC--,否则++\n当单元RC降至0，说明程序不再需要该单元，将它放入自由单元列表"),e("code",[n._v("free_list")])])]),n._v(" "),e("p",[e("strong",[n._v("算法详解")]),n._v("：\n为了简化讨论，此刻我们假定所有单元有着固定大小\n"),e("em",[e("strong",[n._v("下面介绍的数据结构为另外开辟，需要占用一个的内存空间")])]),n._v("\n假设每个单元结构都为")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("struct T{\n    int refValue;//引用值计数大小 即RC(T)<==>T.refValue\n    T left;\n    T right;\n}\n")])])]),e("p",[n._v("实际中每个T结构的T引用是不固定的\n"),e("code",[n._v("free_list")]),n._v("：自由单元列表(类似指针链表的用法)\n"),e("code",[n._v("Children(T)")]),n._v("：T单元中有引用其他单元的槽列表,如："),e("code",[n._v("[T.left,T.right]")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('//分配空间\nallocate(){\n    newcell=free_list; //弹出自由单元列表的第一个元素\n    free_list=free_list.next;\n    return newcell;\n}\n//从自由链表取出一个新单元，RC置为1\nnew(){\n    if(free_list==null)abort "内存耗尽";//结束操作\n    newcell = allocate() ;\n    RC(newcell) = 1;\n    return newcell;\n}\n//下面更新默认修改引用指的是left的引用修改，即*U <=> *(U.left) 更复杂的例子见后面\n//单元N归还到自由链表,N放在表头减少检索操作\nfree(N){\n    N.next = free_list;\n    free_list = N;\n}\n//删除对单元T的一次引用\ndelete(T){\n    RC(T) --;\n    if(RC(T)==0){\n        //说明没有其他单元引用T,此时可以释放资源，在此之前还得递归删除T对其他单元的引用\n        for U in Children(T)\n            delete(*U);\n        free(T);\n    }\n}\n//将单元R引用的地址改为S\nUpdate(R,S){\n    if(S==null){\n        //如果S为null，即删除R的引用\n        \n    }\n    RC(S)++;\n    delete(*R);//*R为原来的引用单元\n    *R=S;//更新R的引用单元为S\n}\n')])])]),e("p",[e("strong",[n._v("例子")]),n._v("：\n"),e("img",{attrs:{src:"https://www.hongweipeng.com/usr/uploads/2016/06/3048782627.png",alt:"无标题.png"}})]),n._v(" "),e("p",[n._v("此时执行"),e("code",[n._v("Update(R.right,nil)")]),n._v(",\n由于这是指向S的唯一指针，所以S出发的每个指针递归调用delete过程，然后把S加入自由链表\n"),e("strong",[n._v("过程1")]),n._v("：\n"),e("img",{attrs:{src:"https://www.hongweipeng.com/usr/uploads/2016/06/1748747506.png",alt:"2.png"}})]),n._v(" "),e("p",[e("strong",[n._v("过程2")]),n._v("：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://www.hongweipeng.com/usr/uploads/2016/06/497451505.png",alt:"21.png"}})]),n._v(" "),e("p",[e("strong",[n._v("最后")]),n._v("：\n"),e("img",{attrs:{src:"https://www.hongweipeng.com/usr/uploads/2016/06/2871847764.png",alt:"final.png"}})]),n._v(" "),e("h3",{attrs:{id:"引用计数法的优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用计数法的优缺点"}},[n._v("#")]),n._v(" 引用计数法的优缺点")]),n._v(" "),e("p",[e("strong",[n._v("优点")]),n._v("：")]),n._v(" "),e("blockquote",[e("p",[n._v("1.由于内存管理的开销分布在整个计算过程之中，与基于追踪的收集器相比，有更加平滑的响应时间\n"),e("strong",[e("code",[n._v("注意")]),e("strong",[n._v("我们上面的简单算法在分布处理开销存在")]),n._v("起伏")]),n._v("：删除最后一个引用的代价依赖于子图大小，下一章将改进这个问题。\n2.当某单元引用计数为0时，系统无需访问位于堆中其他页面的单元就能回收它。基于追踪的算法需要在回收废弃单元之前遍历所有存活单元\n"),e("strong",[e("code",[n._v("注意")]),e("strong",[n._v("还可能访问该单元的后代，下一章将讨论该问题\n3."),e("code",[n._v("[了解，未深入]")]),n._v('标准的引用计数法允许"短命"单元以一种类似栈分配的方式在刚丢弃时就立刻回收重用，而基于追踪的算法，废弃单元会保持未分配状态直到整个堆耗尽。与')]),n._v("简单")]),n._v("的追踪式算法"),e("em",[n._v("总是从堆中申请fresh单元的方式")]),n._v("相比，"),e("em",[n._v("立刻重用单元")]),n._v("会产生"),e("strong",[n._v("更少的缺页error和良好的cache行为")]),n._v("。")])]),n._v(" "),e("p",[e("strong",[n._v("缺点")]),n._v("：")]),n._v(" "),e("blockquote",[e("p",[n._v("1.开销大。基于追踪的机制下，更新指针没有任何内存管理开销\n2.维护难。若用户程序耦合较高，引用计数系统必须谨慎维护计数，一处遗漏将带来严重后果。[这边举例的不是编译器，而是类似photoShop的用户程序]\n3.额外的空间来存放引用计数值，[下一章将改进这个问题]\n4."),e("strong",[e("code",[n._v("环形数据结构无法回收")])]),n._v("[可采用与追踪式结合或其他方式，下一章将讨论]")])]),n._v(" "),e("h2",{attrs:{id:"标记-清扫算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标记-清扫算法"}},[n._v("#")]),n._v(" 标记-清扫算法")]),n._v(" "),e("p",[e("strong",[n._v("算法简述")]),n._v("\n内存单元在变成垃圾时不会马上被回收，而是保持不可达到，直到内存耗尽。\n如果此时有新单元的请求，系统暂时挂起，并调用垃圾回收，将不可达到的单元清扫回自由单元池\n"),e("strong",[n._v("算法详解")]),n._v("：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('//从自由单元池获取一个新单元\nnew(){\n    if(free_list.isEmpty()){\n        mark_sweep();//进行标记清扫\n    }\n    newcell = allocate();//同上一个算法\n    return newcell;\n}\n//标记清扫分为标记/清扫\nmark_sweep(){\n    //从每个根节点出发开始向下标记\n    for R in Roots\n        mark(R);\n    sweep();//清扫\n    //如果空间还是不够\n    if(free_pool.isEmpty())\n        abort "内存耗尽"\n}\n//每个单元需要保留一个二进制让垃圾收集器使用，记录能否从根出发到该单元\n//其实就是广搜，这里我们用简单的递归标记算法\nmark(N){\n    if(N.mark_bit == unmarked){\n        N.mark_bit = marked;\n        for M in Children(N)\n            mark(*M);\n    }\n}\n')])])]),e("blockquote",[e("p",[n._v("如图\n"),e("img",{attrs:{src:"https://www.hongweipeng.com/usr/uploads/2016/06/1635946254.png",alt:"标记清扫.png"}}),n._v("\n这样我们可以安全的将未被标记的单元归还给自由单元池，这个清扫的工作，如下：")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("//对堆的eager(急切) sweep\nsweep(){\n    //从堆的底部出发，线性的清扫整个堆\n    N = Heap_bottom;\n    while(N<Heap_top){\n        if(N.mark_bit==unmarked){\n            free(N);//释放空间，实现可参考引用计数法\n        }else{\n            //说明单元存活，清除它的标记位，为下一次GC做准备\n            N.mark_bit=unmarked;\n        }\n        N+=size(N);//堆地址向上移动\n    }\n}\n")])])]),e("h3",{attrs:{id:"优势和弱点-相比引用计数法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优势和弱点-相比引用计数法"}},[n._v("#")]),n._v(" 优势和弱点(相比引用计数法)")]),n._v(" "),e("h4",{attrs:{id:"优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[n._v("#")]),n._v(" "),e("strong",[n._v("优点")])]),n._v(" "),e("blockquote",[e("p",[n._v("1.可处理环形结构\n2.操作指针没有额外开销")])]),n._v(" "),e("h4",{attrs:{id:"弱点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#弱点"}},[n._v("#")]),n._v(" "),e("strong",[n._v("弱点")])]),n._v(" "),e("blockquote",[e("p",[n._v("1.是一种**“停止-启动”**算法，造成中断的可能是巨大的，不适合实时系统。\n**注意：**一个解决办法是在关键的时间段禁止垃圾收集。后面章节会提到\n**注意2：**如果响应时间不是重要因素，该算法能够提供比引用计数法更好的性能。\n2.会造成内存空间更破碎，导致cache容易失效。")])]),n._v(" "),e("h2",{attrs:{id:"节点复制算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#节点复制算法"}},[n._v("#")]),n._v(" 节点复制算法")]),n._v(" "),e("p",[e("strong",[n._v("算法简介")]),n._v("\n将整个堆分为两个半区，一个包含现有数据，一个包含已被废弃的数据；\n垃圾收集从切换两个半区的角色开始：\n1.收集器到老半区(FormSpace)遍历存活的数据结构,在"),e("em",[n._v("第一次访问单元时")]),n._v("把它负责到新半区(ToSpace);\n2.FormSpace所有存活单位都访问过后，垃圾收集器在ToSpace建立了一个存活数据结构的副本，这些结构缩并的排列在ToSpace的底部，用户程序可以开始重新运行了。")]),n._v(" "),e("p",[e("strong",[n._v("算法详解")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('//初始分区\ninit(){\n    //举例;Head_bottom =100 Head_size=200\n    ToSpace = Head_bottom; //100\n    space_size = Head_size/2; //100\n    topOfSpace = ToSpace + space_size - 1; //199 [100-199]\n    FromSpace = topOfSpace + 1; //200 [200-299] \n    free = ToSpace; //100 自由空间开始处的指针\n}\n//该算法能处理可变大小的对象，n为对象的大小\nNew(n){\n    if(free + n > topOfSpace){\n        //自由空间不足，执行交换Space压缩空间\n        flip();\n    }\n    if(free + n > topOfSpace){\n        //交换Space和压缩空间还是空间不足\n        abort "内存耗尽"\n    }\n    newcell = free; //新单元从自由空间头指针开始分配 即allocate()\n    free+=n;\n    return newcell;\n}\n//交换ToSpace和FromSpace的角色\nflip(){\n    //重置ToSpace,FromSpace,topOfSpace\n    //      100     200       199\n    swap(FromSpace,ToSpace);//ToSpace = 200,FromSpace = 100\n    topOfSpace = ToSpace + space_size - 1; //299\n    free = ToSpace; //200\n    //复制可到达单元到ToSpace\n    for R in Roots\n        R = copy(R);//返回的新R是ToSpace的地址\n}\n//复制数据结构必须小心保持共享结构的拓扑，否则会出现多个复本，其影响：\n//可能只是增大空间占用，可能引发错误(更新其中一个复本，却读取另一个复本)，可能出现环形数据结构占用巨大空间\n\n//复制节点时，FromSpace中的对象会保留一个迁移地址来保持共享，迁移地址为ToSpace中复本的地址\n//每当FromSpace中的单元被访问，Copy过程会检查该单元是否被复制\n//若是，则返回迁移地址，否则在ToSpace保留空间以备复制\n\n//假设单元P保存迁移地址的域为P[0]\n//该函数传入的参数P不是一整个单元，只是单元的一个域/(字)\ncopy(P){ \n    if(P没有指向其他单元了 || P == null) return P;\n    if(P没有迁移地址){\n        n=size(P);\n        P_NEW = free; //在ToSpace中保留空间\n        free += n;\n        temp = P[0];//原文有这句，感觉没用\n        P[0] = P_NEW ;//设置迁移地址\n        P_NEW [0] = copy(temp);//原文有这句，感觉没用\n        //复制P的其他域到P_NEW \n        for i = 1 to n-1;\n            P_NEW [i] = copy(p[i]);\n    }\n    return P[0];\n}\n')])])]),e("p",[e("strong",[n._v("例子：")]),n._v(" "),e("img",{attrs:{src:"https://www.hongweipeng.com/usr/uploads/2016/06/3072258889.png",alt:"标记复制1.png"}})]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("A没有迁移地址\nn=size(A);//3个域\nA_NEW = free //200\ntemp=A[0];//null\nA[0]=A_NEW;//200\nA_NEW [0] = copy(temp);//null\n    A_NEW [1]=copy(A[1]);//更新A的left域 下图\n    A_NEW [2]=copy(A[2]);//更新A的right域 下下图\n")])])]),e("p",[e("img",{attrs:{src:"https://www.hongweipeng.com/usr/uploads/2016/06/908353556.png",alt:"标记复制2.png"}})]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("A_NEW [1]=copy(A[1]);/A[1]指向的是B,进入新的copy\n    B没有迁移地址\n    n=size(B);//2个域\n    B_NEW = free; //203\n    temp=B[0];//null\n    B[0]=B_NEW;//203\n    B_NEW [0] = copy(temp);//null\n        B_NEW[1]=copy(B[1]);//B[1]没有指向其他单元，直接返回. B_NEW[1]=B[1]\nA_NEW [1]=B_NEW;//最后返回,A_NEW[1]指向B_NEW\n")])])]),e("p",[e("img",{attrs:{src:"https://www.hongweipeng.com/usr/uploads/2016/06/2246969686.png",alt:"标记复制3.png"}})]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("A_NEW [2]=copy(A[2]);//A[2]指向的是C\n    C没有迁移地址\n    n=size(C);//3个域\n    C_NEW = free;//205\n    temp=C[0];//null\n    C[0]=C_NEW;//205\n    C_NEW [0] = copy(temp);//null\n        C_NEW[1]=copy(C[1]);//C[1]指向的D,copy(D)的最后返回D_NEW,即C_NEW[1]=D_NEW;\n        C_NEW[2]=copy(C[2]);//C[2]指向A,A存在迁移地址，直接返回，即C_NEW[2]=A_NEW;\n")])])]),e("p",[e("img",{attrs:{src:"https://www.hongweipeng.com/usr/uploads/2016/06/1439497356.png",alt:"标记复制4.png"}})]),n._v(" "),e("h3",{attrs:{id:"节点复制算法的优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#节点复制算法的优缺点"}},[n._v("#")]),n._v(" 节点复制算法的优缺点")]),n._v(" "),e("p",[e("strong",[n._v("优点：")])]),n._v(" "),e("blockquote",[e("p",[e("strong",[n._v("极大降低内存分配的开销：")]),n._v("\n检查空间是否耗尽只要做简单指针比较;\n获取新内存可简单通过递增自由空间实现;\n内存碎片问题不再出现")])]),n._v(" "),e("p",[e("strong",[n._v("缺点：")])]),n._v(" "),e("blockquote",[e("p",[n._v("使用了2个半区，空间代价是2倍，可能出现更多的缺页错误")])]),n._v(" "),e("h2",{attrs:{id:"比较标记-清扫和节点复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较标记-清扫和节点复制"}},[n._v("#")]),n._v(" 比较"),e("strong",[n._v("标记-清扫")]),n._v("和"),e("strong",[n._v("节点复制")])]),n._v(" "),e("p",[e("code",[n._v("节点复制收集器")]),n._v("，划分2个半区。随程序内存占用率的升高，收集器的性能会不断下降，这是因为每次收集回收的自由内存越来越少。比"),e("code",[n._v("标记-清扫")]),n._v("性能下降更快。")]),n._v(" "),e("p",[e("code",[n._v("节点复制收集器")]),n._v("的渐进复杂度比"),e("code",[n._v("标记-清扫")]),n._v("要小，其正比于"),e("strong",[n._v("存活数据结构的大小")]),n._v("，非整个半区的大小。")]),n._v(" "),e("h3",{attrs:{id:"比较两者的渐进复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较两者的渐进复杂度"}},[n._v("#")]),n._v(" 比较两者的"),e("strong",[n._v("渐进复杂度")])]),n._v(" "),e("p",[e("strong",[n._v("堆的容量")]),n._v("："),e("code",[n._v("M")]),n._v(" , "),e("strong",[n._v("存活数据占用的内存大小")]),n._v("： "),e("code",[n._v("R")])]),n._v(" "),e("p",[e("strong",[n._v("时间复杂度")]),n._v("\n节点复制收集器必须追踪并更新根集合和存活数据结构的每个指针，搬迁到ToSpace,故执行一次GC的时间复杂度\n"),e("em",[e("strong",[n._v("t(节点复制)=aR")])]),n._v("\n标记-清扫追踪指向存活数据结构的指针，并在清扫阶段"),e("strong",[n._v("线性清扫")]),n._v("整个堆\n"),e("em",[e("strong",[n._v("t(标记-清扫)=bR+cM")])])]),n._v(" "),e("p",[e("strong",[n._v("每次GC恢复的内存数量")]),n._v("\nm(复制节点)=M/2-R\nm(标记清扫)=M-R")]),n._v(" "),e("p",[e("strong",[n._v("算法效率e为单位时间内回收的内存数量")]),n._v(" "),e("em",[n._v("e(节点复制)=1/(2ar)-1/a")]),n._v(" "),e("em",[n._v("e(标记清扫)=(1-r)/(br+c)")]),n._v(" "),e("em",[n._v("其中r=R/M,表示程序的内存占用率")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://www.hongweipeng.com/usr/uploads/2016/06/2576938355.png",alt:"效率图.png"}})]),n._v(" "),e("hr"),n._v(" "),e("h1",{attrs:{id:"第三章-引用计数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三章-引用计数"}},[n._v("#")]),n._v(" 第三章 引用计数")]),n._v(" "),e("p",[n._v("本章 将对上一章简单引用计数算法进行改进")])])}),[],!1,null,null,null);e.default=a.exports}}]);