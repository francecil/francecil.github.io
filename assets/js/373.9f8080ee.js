(window.webpackJsonp=window.webpackJsonp||[]).push([[373],{1159:function(t,n,e){"use strict";e.r(n);var a=e(30),r=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("CountDownLatch是一种闭锁，延迟线程的进度直到终止状态\n包括一个计数器，初始化一个正数，表示需要等待的事件数量。")]),t._v(" "),n("blockquote",[n("p",[n("strong",[t._v("countDown")]),t._v(":递减计数器\n"),n("strong",[t._v("await")]),t._v(":等待计数器直到0")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('import java.util.concurrent.CountDownLatch;\n\npublic class TestCountDownLatch {\n\tpublic static long timeTasks(int nThreads,final Runnable task) throws InterruptedException{\n\t\tfinal CountDownLatch startLatch=new CountDownLatch(1);\n\t\tfinal CountDownLatch endLatch = new CountDownLatch(nThreads);\n\t\tfinal StringBuffer stringBuffer=new StringBuffer();\n\t\tfor(int i=0;i<nThreads;i++){\n\t\t\t Thread t=new Thread(){\n\t\t\t\tpublic void run(){\n\t\t\t\t\tSystem.out.println("初始化线程资源");\n\t\t\t\t\ttry{\n\t\t\t\t\t\tstartLatch.await();\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t//do something\n\t\t\t\t\t\t\ttask.run();\n\t\t\t\t\t\t}finally{\n\t\t\t\t\t\t\tendLatch.countDown();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}catch(InterruptedException ignored){}\n\t\t\t\t}\t\n\t\t\t};\n\t\t\tt.start();\n\t\t}\n\t\tlong start = System.nanoTime();\n\t\tstringBuffer.append("startLatch await pre end\\n");\n\t\t//初始化线程资源:如创建线程等，这些时间花费是不要算入任务时间的\n\t\t//调用countDown用 所有线程开始进行run方法\n\t\tstartLatch.countDown();\n\t\t//等待所有线程结束\n\t\tendLatch.await();\n\t\tlong end=System.nanoTime();\n\t\tSystem.out.println(stringBuffer.toString());\n\t\treturn end-start;\n\t}\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tRunnable runnable=new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(3000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tSystem.out.println("使用时间："+timeTasks(5,runnable));\n\t\t} catch (InterruptedException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);